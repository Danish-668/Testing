
SPI_BGT60TR13C.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001eec  080001d8  080001d8  000011d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  080020c4  080020c4  000030c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080020d4  080020d4  0000400c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  080020d4  080020d4  0000400c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  080020d4  080020d4  0000400c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080020d4  080020d4  000030d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080020d8  080020d8  000030d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  080020dc  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000084  2000000c  080020e8  0000400c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000090  080020e8  00004090  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000400c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00006eae  00000000  00000000  0000403c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000016ca  00000000  00000000  0000aeea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000007b0  00000000  00000000  0000c5b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000005b2  00000000  00000000  0000cd68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001bc86  00000000  00000000  0000d31a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00008e44  00000000  00000000  00028fa0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ae7b5  00000000  00000000  00031de4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e0599  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001d4c  00000000  00000000  000e05dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005e  00000000  00000000  000e2328  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000000c 	.word	0x2000000c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	080020ac 	.word	0x080020ac

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000010 	.word	0x20000010
 8000214:	080020ac 	.word	0x080020ac

08000218 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000218:	b580      	push	{r7, lr}
 800021a:	b08a      	sub	sp, #40	@ 0x28
 800021c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800021e:	f107 0314 	add.w	r3, r7, #20
 8000222:	2200      	movs	r2, #0
 8000224:	601a      	str	r2, [r3, #0]
 8000226:	605a      	str	r2, [r3, #4]
 8000228:	609a      	str	r2, [r3, #8]
 800022a:	60da      	str	r2, [r3, #12]
 800022c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800022e:	4b34      	ldr	r3, [pc, #208]	@ (8000300 <MX_GPIO_Init+0xe8>)
 8000230:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000232:	4a33      	ldr	r2, [pc, #204]	@ (8000300 <MX_GPIO_Init+0xe8>)
 8000234:	f043 0304 	orr.w	r3, r3, #4
 8000238:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800023a:	4b31      	ldr	r3, [pc, #196]	@ (8000300 <MX_GPIO_Init+0xe8>)
 800023c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800023e:	f003 0304 	and.w	r3, r3, #4
 8000242:	613b      	str	r3, [r7, #16]
 8000244:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000246:	4b2e      	ldr	r3, [pc, #184]	@ (8000300 <MX_GPIO_Init+0xe8>)
 8000248:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800024a:	4a2d      	ldr	r2, [pc, #180]	@ (8000300 <MX_GPIO_Init+0xe8>)
 800024c:	f043 0320 	orr.w	r3, r3, #32
 8000250:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000252:	4b2b      	ldr	r3, [pc, #172]	@ (8000300 <MX_GPIO_Init+0xe8>)
 8000254:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000256:	f003 0320 	and.w	r3, r3, #32
 800025a:	60fb      	str	r3, [r7, #12]
 800025c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800025e:	4b28      	ldr	r3, [pc, #160]	@ (8000300 <MX_GPIO_Init+0xe8>)
 8000260:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000262:	4a27      	ldr	r2, [pc, #156]	@ (8000300 <MX_GPIO_Init+0xe8>)
 8000264:	f043 0301 	orr.w	r3, r3, #1
 8000268:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800026a:	4b25      	ldr	r3, [pc, #148]	@ (8000300 <MX_GPIO_Init+0xe8>)
 800026c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800026e:	f003 0301 	and.w	r3, r3, #1
 8000272:	60bb      	str	r3, [r7, #8]
 8000274:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000276:	4b22      	ldr	r3, [pc, #136]	@ (8000300 <MX_GPIO_Init+0xe8>)
 8000278:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800027a:	4a21      	ldr	r2, [pc, #132]	@ (8000300 <MX_GPIO_Init+0xe8>)
 800027c:	f043 0302 	orr.w	r3, r3, #2
 8000280:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000282:	4b1f      	ldr	r3, [pc, #124]	@ (8000300 <MX_GPIO_Init+0xe8>)
 8000284:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000286:	f003 0302 	and.w	r3, r3, #2
 800028a:	607b      	str	r3, [r7, #4]
 800028c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, RST_BGT60_Pin|CS_BGT60_Pin, GPIO_PIN_RESET);
 800028e:	2200      	movs	r2, #0
 8000290:	f44f 5140 	mov.w	r1, #12288	@ 0x3000
 8000294:	481b      	ldr	r0, [pc, #108]	@ (8000304 <MX_GPIO_Init+0xec>)
 8000296:	f000 fcf3 	bl	8000c80 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 800029a:	2200      	movs	r2, #0
 800029c:	2140      	movs	r1, #64	@ 0x40
 800029e:	481a      	ldr	r0, [pc, #104]	@ (8000308 <MX_GPIO_Init+0xf0>)
 80002a0:	f000 fcee 	bl	8000c80 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = KEY_Pin;
 80002a4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80002a8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80002aa:	2300      	movs	r3, #0
 80002ac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80002ae:	2302      	movs	r3, #2
 80002b0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(KEY_GPIO_Port, &GPIO_InitStruct);
 80002b2:	f107 0314 	add.w	r3, r7, #20
 80002b6:	4619      	mov	r1, r3
 80002b8:	4813      	ldr	r0, [pc, #76]	@ (8000308 <MX_GPIO_Init+0xf0>)
 80002ba:	f000 fb5f 	bl	800097c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = RST_BGT60_Pin|CS_BGT60_Pin;
 80002be:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 80002c2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80002c4:	2301      	movs	r3, #1
 80002c6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002c8:	2300      	movs	r3, #0
 80002ca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80002cc:	2300      	movs	r3, #0
 80002ce:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80002d0:	f107 0314 	add.w	r3, r7, #20
 80002d4:	4619      	mov	r1, r3
 80002d6:	480b      	ldr	r0, [pc, #44]	@ (8000304 <MX_GPIO_Init+0xec>)
 80002d8:	f000 fb50 	bl	800097c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Pin;
 80002dc:	2340      	movs	r3, #64	@ 0x40
 80002de:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80002e0:	2301      	movs	r3, #1
 80002e2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002e4:	2300      	movs	r3, #0
 80002e6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80002e8:	2300      	movs	r3, #0
 80002ea:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80002ec:	f107 0314 	add.w	r3, r7, #20
 80002f0:	4619      	mov	r1, r3
 80002f2:	4805      	ldr	r0, [pc, #20]	@ (8000308 <MX_GPIO_Init+0xf0>)
 80002f4:	f000 fb42 	bl	800097c <HAL_GPIO_Init>

}
 80002f8:	bf00      	nop
 80002fa:	3728      	adds	r7, #40	@ 0x28
 80002fc:	46bd      	mov	sp, r7
 80002fe:	bd80      	pop	{r7, pc}
 8000300:	40021000 	.word	0x40021000
 8000304:	48000400 	.word	0x48000400
 8000308:	48000800 	.word	0x48000800

0800030c <BGT60TR13C_Reset>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void BGT60TR13C_Reset(void)
{
 800030c:	b580      	push	{r7, lr}
 800030e:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(RST_BGT60_GPIO_Port, RST_BGT60_Pin, GPIO_PIN_RESET);
 8000310:	2200      	movs	r2, #0
 8000312:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000316:	4808      	ldr	r0, [pc, #32]	@ (8000338 <BGT60TR13C_Reset+0x2c>)
 8000318:	f000 fcb2 	bl	8000c80 <HAL_GPIO_WritePin>
    HAL_Delay(5);  // hold reset low for 5ms
 800031c:	2005      	movs	r0, #5
 800031e:	f000 fa27 	bl	8000770 <HAL_Delay>
    HAL_GPIO_WritePin(RST_BGT60_GPIO_Port, RST_BGT60_Pin, GPIO_PIN_SET);
 8000322:	2201      	movs	r2, #1
 8000324:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000328:	4803      	ldr	r0, [pc, #12]	@ (8000338 <BGT60TR13C_Reset+0x2c>)
 800032a:	f000 fca9 	bl	8000c80 <HAL_GPIO_WritePin>
    HAL_Delay(5);  // wait for chip to boot
 800032e:	2005      	movs	r0, #5
 8000330:	f000 fa1e 	bl	8000770 <HAL_Delay>
}
 8000334:	bf00      	nop
 8000336:	bd80      	pop	{r7, pc}
 8000338:	48000400 	.word	0x48000400

0800033c <BGT60TR13C_ReadRegister>:

uint8_t BGT60TR13C_ReadRegister(uint16_t regAddress)
{
 800033c:	b580      	push	{r7, lr}
 800033e:	b086      	sub	sp, #24
 8000340:	af02      	add	r7, sp, #8
 8000342:	4603      	mov	r3, r0
 8000344:	80fb      	strh	r3, [r7, #6]
    uint8_t tx[3];
    uint8_t rx[3];

    // Format 24-bit read command (MSB first)
    // Command structure: [Addr(7:0)][Dummy][R/W=1 + Addr(7:1)]
    tx[0] = (regAddress >> 2) & 0xFF;             // High address bits
 8000346:	88fb      	ldrh	r3, [r7, #6]
 8000348:	089b      	lsrs	r3, r3, #2
 800034a:	b29b      	uxth	r3, r3
 800034c:	b2db      	uxtb	r3, r3
 800034e:	733b      	strb	r3, [r7, #12]
    tx[1] = (regAddress << 6) & 0xC0;             // Low address bits, R/W bit = 1 for read
 8000350:	88fb      	ldrh	r3, [r7, #6]
 8000352:	b2db      	uxtb	r3, r3
 8000354:	019b      	lsls	r3, r3, #6
 8000356:	b2db      	uxtb	r3, r3
 8000358:	737b      	strb	r3, [r7, #13]
    tx[1] |= 0x01;                                // Set read bit
 800035a:	7b7b      	ldrb	r3, [r7, #13]
 800035c:	f043 0301 	orr.w	r3, r3, #1
 8000360:	b2db      	uxtb	r3, r3
 8000362:	737b      	strb	r3, [r7, #13]
    tx[2] = 0x00;                                 // Dummy byte
 8000364:	2300      	movs	r3, #0
 8000366:	73bb      	strb	r3, [r7, #14]

    // Pull CS low
    HAL_GPIO_WritePin(CS_BGT60_GPIO_Port, CS_BGT60_Pin, GPIO_PIN_RESET);
 8000368:	2200      	movs	r2, #0
 800036a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800036e:	480c      	ldr	r0, [pc, #48]	@ (80003a0 <BGT60TR13C_ReadRegister+0x64>)
 8000370:	f000 fc86 	bl	8000c80 <HAL_GPIO_WritePin>

    // SPI transmit + receive
    HAL_SPI_TransmitReceive(&hspi1, tx, rx, 3, HAL_MAX_DELAY);
 8000374:	f107 0208 	add.w	r2, r7, #8
 8000378:	f107 010c 	add.w	r1, r7, #12
 800037c:	f04f 33ff 	mov.w	r3, #4294967295
 8000380:	9300      	str	r3, [sp, #0]
 8000382:	2303      	movs	r3, #3
 8000384:	4807      	ldr	r0, [pc, #28]	@ (80003a4 <BGT60TR13C_ReadRegister+0x68>)
 8000386:	f001 faee 	bl	8001966 <HAL_SPI_TransmitReceive>

    // Pull CS high
    HAL_GPIO_WritePin(CS_BGT60_GPIO_Port, CS_BGT60_Pin, GPIO_PIN_SET);
 800038a:	2201      	movs	r2, #1
 800038c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000390:	4803      	ldr	r0, [pc, #12]	@ (80003a0 <BGT60TR13C_ReadRegister+0x64>)
 8000392:	f000 fc75 	bl	8000c80 <HAL_GPIO_WritePin>

    return rx[2]; // BGT60TR13C sends data in 3rd byte
 8000396:	7abb      	ldrb	r3, [r7, #10]
}
 8000398:	4618      	mov	r0, r3
 800039a:	3710      	adds	r7, #16
 800039c:	46bd      	mov	sp, r7
 800039e:	bd80      	pop	{r7, pc}
 80003a0:	48000400 	.word	0x48000400
 80003a4:	20000028 	.word	0x20000028

080003a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80003a8:	b580      	push	{r7, lr}
 80003aa:	b082      	sub	sp, #8
 80003ac:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80003ae:	f000 f96e 	bl	800068e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80003b2:	f000 f80d 	bl	80003d0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80003b6:	f7ff ff2f 	bl	8000218 <MX_GPIO_Init>
  MX_SPI1_Init();
 80003ba:	f000 f859 	bl	8000470 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  BGT60TR13C_Reset();  // Reset radar
 80003be:	f7ff ffa5 	bl	800030c <BGT60TR13C_Reset>

  uint8_t chip_id = BGT60TR13C_ReadRegister(0x00);  // Address 0x00 is usually the chip ID
 80003c2:	2000      	movs	r0, #0
 80003c4:	f7ff ffba 	bl	800033c <BGT60TR13C_ReadRegister>
 80003c8:	4603      	mov	r3, r0
 80003ca:	71fb      	strb	r3, [r7, #7]

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80003cc:	bf00      	nop
 80003ce:	e7fd      	b.n	80003cc <main+0x24>

080003d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80003d0:	b580      	push	{r7, lr}
 80003d2:	b094      	sub	sp, #80	@ 0x50
 80003d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80003d6:	f107 0318 	add.w	r3, r7, #24
 80003da:	2238      	movs	r2, #56	@ 0x38
 80003dc:	2100      	movs	r1, #0
 80003de:	4618      	mov	r0, r3
 80003e0:	f001 fe38 	bl	8002054 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80003e4:	1d3b      	adds	r3, r7, #4
 80003e6:	2200      	movs	r2, #0
 80003e8:	601a      	str	r2, [r3, #0]
 80003ea:	605a      	str	r2, [r3, #4]
 80003ec:	609a      	str	r2, [r3, #8]
 80003ee:	60da      	str	r2, [r3, #12]
 80003f0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80003f2:	2000      	movs	r0, #0
 80003f4:	f000 fc5c 	bl	8000cb0 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80003f8:	2301      	movs	r3, #1
 80003fa:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80003fc:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000400:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000402:	2302      	movs	r3, #2
 8000404:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000406:	2303      	movs	r3, #3
 8000408:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
 800040a:	2302      	movs	r3, #2
 800040c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 800040e:	2355      	movs	r3, #85	@ 0x55
 8000410:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000412:	2302      	movs	r3, #2
 8000414:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000416:	2302      	movs	r3, #2
 8000418:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800041a:	2302      	movs	r3, #2
 800041c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800041e:	f107 0318 	add.w	r3, r7, #24
 8000422:	4618      	mov	r0, r3
 8000424:	f000 fcf8 	bl	8000e18 <HAL_RCC_OscConfig>
 8000428:	4603      	mov	r3, r0
 800042a:	2b00      	cmp	r3, #0
 800042c:	d001      	beq.n	8000432 <SystemClock_Config+0x62>
  {
    Error_Handler();
 800042e:	f000 f818 	bl	8000462 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000432:	230f      	movs	r3, #15
 8000434:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000436:	2303      	movs	r3, #3
 8000438:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800043a:	2300      	movs	r3, #0
 800043c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800043e:	2300      	movs	r3, #0
 8000440:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000442:	2300      	movs	r3, #0
 8000444:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000446:	1d3b      	adds	r3, r7, #4
 8000448:	2104      	movs	r1, #4
 800044a:	4618      	mov	r0, r3
 800044c:	f000 fffc 	bl	8001448 <HAL_RCC_ClockConfig>
 8000450:	4603      	mov	r3, r0
 8000452:	2b00      	cmp	r3, #0
 8000454:	d001      	beq.n	800045a <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8000456:	f000 f804 	bl	8000462 <Error_Handler>
  }
}
 800045a:	bf00      	nop
 800045c:	3750      	adds	r7, #80	@ 0x50
 800045e:	46bd      	mov	sp, r7
 8000460:	bd80      	pop	{r7, pc}

08000462 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000462:	b480      	push	{r7}
 8000464:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000466:	b672      	cpsid	i
}
 8000468:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800046a:	bf00      	nop
 800046c:	e7fd      	b.n	800046a <Error_Handler+0x8>
	...

08000470 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000470:	b580      	push	{r7, lr}
 8000472:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000474:	4b1b      	ldr	r3, [pc, #108]	@ (80004e4 <MX_SPI1_Init+0x74>)
 8000476:	4a1c      	ldr	r2, [pc, #112]	@ (80004e8 <MX_SPI1_Init+0x78>)
 8000478:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800047a:	4b1a      	ldr	r3, [pc, #104]	@ (80004e4 <MX_SPI1_Init+0x74>)
 800047c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000480:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000482:	4b18      	ldr	r3, [pc, #96]	@ (80004e4 <MX_SPI1_Init+0x74>)
 8000484:	2200      	movs	r2, #0
 8000486:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000488:	4b16      	ldr	r3, [pc, #88]	@ (80004e4 <MX_SPI1_Init+0x74>)
 800048a:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 800048e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000490:	4b14      	ldr	r3, [pc, #80]	@ (80004e4 <MX_SPI1_Init+0x74>)
 8000492:	2200      	movs	r2, #0
 8000494:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000496:	4b13      	ldr	r3, [pc, #76]	@ (80004e4 <MX_SPI1_Init+0x74>)
 8000498:	2200      	movs	r2, #0
 800049a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800049c:	4b11      	ldr	r3, [pc, #68]	@ (80004e4 <MX_SPI1_Init+0x74>)
 800049e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80004a2:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 80004a4:	4b0f      	ldr	r3, [pc, #60]	@ (80004e4 <MX_SPI1_Init+0x74>)
 80004a6:	2230      	movs	r2, #48	@ 0x30
 80004a8:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80004aa:	4b0e      	ldr	r3, [pc, #56]	@ (80004e4 <MX_SPI1_Init+0x74>)
 80004ac:	2200      	movs	r2, #0
 80004ae:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80004b0:	4b0c      	ldr	r3, [pc, #48]	@ (80004e4 <MX_SPI1_Init+0x74>)
 80004b2:	2200      	movs	r2, #0
 80004b4:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80004b6:	4b0b      	ldr	r3, [pc, #44]	@ (80004e4 <MX_SPI1_Init+0x74>)
 80004b8:	2200      	movs	r2, #0
 80004ba:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 80004bc:	4b09      	ldr	r3, [pc, #36]	@ (80004e4 <MX_SPI1_Init+0x74>)
 80004be:	2207      	movs	r2, #7
 80004c0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80004c2:	4b08      	ldr	r3, [pc, #32]	@ (80004e4 <MX_SPI1_Init+0x74>)
 80004c4:	2200      	movs	r2, #0
 80004c6:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80004c8:	4b06      	ldr	r3, [pc, #24]	@ (80004e4 <MX_SPI1_Init+0x74>)
 80004ca:	2208      	movs	r2, #8
 80004cc:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80004ce:	4805      	ldr	r0, [pc, #20]	@ (80004e4 <MX_SPI1_Init+0x74>)
 80004d0:	f001 f99e 	bl	8001810 <HAL_SPI_Init>
 80004d4:	4603      	mov	r3, r0
 80004d6:	2b00      	cmp	r3, #0
 80004d8:	d001      	beq.n	80004de <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80004da:	f7ff ffc2 	bl	8000462 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80004de:	bf00      	nop
 80004e0:	bd80      	pop	{r7, pc}
 80004e2:	bf00      	nop
 80004e4:	20000028 	.word	0x20000028
 80004e8:	40013000 	.word	0x40013000

080004ec <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80004ec:	b580      	push	{r7, lr}
 80004ee:	b08a      	sub	sp, #40	@ 0x28
 80004f0:	af00      	add	r7, sp, #0
 80004f2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004f4:	f107 0314 	add.w	r3, r7, #20
 80004f8:	2200      	movs	r2, #0
 80004fa:	601a      	str	r2, [r3, #0]
 80004fc:	605a      	str	r2, [r3, #4]
 80004fe:	609a      	str	r2, [r3, #8]
 8000500:	60da      	str	r2, [r3, #12]
 8000502:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8000504:	687b      	ldr	r3, [r7, #4]
 8000506:	681b      	ldr	r3, [r3, #0]
 8000508:	4a17      	ldr	r2, [pc, #92]	@ (8000568 <HAL_SPI_MspInit+0x7c>)
 800050a:	4293      	cmp	r3, r2
 800050c:	d128      	bne.n	8000560 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800050e:	4b17      	ldr	r3, [pc, #92]	@ (800056c <HAL_SPI_MspInit+0x80>)
 8000510:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000512:	4a16      	ldr	r2, [pc, #88]	@ (800056c <HAL_SPI_MspInit+0x80>)
 8000514:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000518:	6613      	str	r3, [r2, #96]	@ 0x60
 800051a:	4b14      	ldr	r3, [pc, #80]	@ (800056c <HAL_SPI_MspInit+0x80>)
 800051c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800051e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000522:	613b      	str	r3, [r7, #16]
 8000524:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000526:	4b11      	ldr	r3, [pc, #68]	@ (800056c <HAL_SPI_MspInit+0x80>)
 8000528:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800052a:	4a10      	ldr	r2, [pc, #64]	@ (800056c <HAL_SPI_MspInit+0x80>)
 800052c:	f043 0301 	orr.w	r3, r3, #1
 8000530:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000532:	4b0e      	ldr	r3, [pc, #56]	@ (800056c <HAL_SPI_MspInit+0x80>)
 8000534:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000536:	f003 0301 	and.w	r3, r3, #1
 800053a:	60fb      	str	r3, [r7, #12]
 800053c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800053e:	23e0      	movs	r3, #224	@ 0xe0
 8000540:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000542:	2302      	movs	r3, #2
 8000544:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000546:	2300      	movs	r3, #0
 8000548:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800054a:	2300      	movs	r3, #0
 800054c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800054e:	2305      	movs	r3, #5
 8000550:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000552:	f107 0314 	add.w	r3, r7, #20
 8000556:	4619      	mov	r1, r3
 8000558:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800055c:	f000 fa0e 	bl	800097c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8000560:	bf00      	nop
 8000562:	3728      	adds	r7, #40	@ 0x28
 8000564:	46bd      	mov	sp, r7
 8000566:	bd80      	pop	{r7, pc}
 8000568:	40013000 	.word	0x40013000
 800056c:	40021000 	.word	0x40021000

08000570 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	b082      	sub	sp, #8
 8000574:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000576:	4b0f      	ldr	r3, [pc, #60]	@ (80005b4 <HAL_MspInit+0x44>)
 8000578:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800057a:	4a0e      	ldr	r2, [pc, #56]	@ (80005b4 <HAL_MspInit+0x44>)
 800057c:	f043 0301 	orr.w	r3, r3, #1
 8000580:	6613      	str	r3, [r2, #96]	@ 0x60
 8000582:	4b0c      	ldr	r3, [pc, #48]	@ (80005b4 <HAL_MspInit+0x44>)
 8000584:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000586:	f003 0301 	and.w	r3, r3, #1
 800058a:	607b      	str	r3, [r7, #4]
 800058c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800058e:	4b09      	ldr	r3, [pc, #36]	@ (80005b4 <HAL_MspInit+0x44>)
 8000590:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000592:	4a08      	ldr	r2, [pc, #32]	@ (80005b4 <HAL_MspInit+0x44>)
 8000594:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000598:	6593      	str	r3, [r2, #88]	@ 0x58
 800059a:	4b06      	ldr	r3, [pc, #24]	@ (80005b4 <HAL_MspInit+0x44>)
 800059c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800059e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80005a2:	603b      	str	r3, [r7, #0]
 80005a4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80005a6:	f000 fc27 	bl	8000df8 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80005aa:	bf00      	nop
 80005ac:	3708      	adds	r7, #8
 80005ae:	46bd      	mov	sp, r7
 80005b0:	bd80      	pop	{r7, pc}
 80005b2:	bf00      	nop
 80005b4:	40021000 	.word	0x40021000

080005b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80005b8:	b480      	push	{r7}
 80005ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80005bc:	bf00      	nop
 80005be:	e7fd      	b.n	80005bc <NMI_Handler+0x4>

080005c0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80005c0:	b480      	push	{r7}
 80005c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80005c4:	bf00      	nop
 80005c6:	e7fd      	b.n	80005c4 <HardFault_Handler+0x4>

080005c8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80005c8:	b480      	push	{r7}
 80005ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80005cc:	bf00      	nop
 80005ce:	e7fd      	b.n	80005cc <MemManage_Handler+0x4>

080005d0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80005d0:	b480      	push	{r7}
 80005d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80005d4:	bf00      	nop
 80005d6:	e7fd      	b.n	80005d4 <BusFault_Handler+0x4>

080005d8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80005d8:	b480      	push	{r7}
 80005da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80005dc:	bf00      	nop
 80005de:	e7fd      	b.n	80005dc <UsageFault_Handler+0x4>

080005e0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80005e0:	b480      	push	{r7}
 80005e2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80005e4:	bf00      	nop
 80005e6:	46bd      	mov	sp, r7
 80005e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ec:	4770      	bx	lr

080005ee <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80005ee:	b480      	push	{r7}
 80005f0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80005f2:	bf00      	nop
 80005f4:	46bd      	mov	sp, r7
 80005f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005fa:	4770      	bx	lr

080005fc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80005fc:	b480      	push	{r7}
 80005fe:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000600:	bf00      	nop
 8000602:	46bd      	mov	sp, r7
 8000604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000608:	4770      	bx	lr

0800060a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800060a:	b580      	push	{r7, lr}
 800060c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800060e:	f000 f891 	bl	8000734 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000612:	bf00      	nop
 8000614:	bd80      	pop	{r7, pc}
	...

08000618 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000618:	b480      	push	{r7}
 800061a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800061c:	4b06      	ldr	r3, [pc, #24]	@ (8000638 <SystemInit+0x20>)
 800061e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000622:	4a05      	ldr	r2, [pc, #20]	@ (8000638 <SystemInit+0x20>)
 8000624:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000628:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800062c:	bf00      	nop
 800062e:	46bd      	mov	sp, r7
 8000630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000634:	4770      	bx	lr
 8000636:	bf00      	nop
 8000638:	e000ed00 	.word	0xe000ed00

0800063c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800063c:	480d      	ldr	r0, [pc, #52]	@ (8000674 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800063e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000640:	480d      	ldr	r0, [pc, #52]	@ (8000678 <LoopForever+0x6>)
  ldr r1, =_edata
 8000642:	490e      	ldr	r1, [pc, #56]	@ (800067c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000644:	4a0e      	ldr	r2, [pc, #56]	@ (8000680 <LoopForever+0xe>)
  movs r3, #0
 8000646:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000648:	e002      	b.n	8000650 <LoopCopyDataInit>

0800064a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800064a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800064c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800064e:	3304      	adds	r3, #4

08000650 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000650:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000652:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000654:	d3f9      	bcc.n	800064a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000656:	4a0b      	ldr	r2, [pc, #44]	@ (8000684 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000658:	4c0b      	ldr	r4, [pc, #44]	@ (8000688 <LoopForever+0x16>)
  movs r3, #0
 800065a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800065c:	e001      	b.n	8000662 <LoopFillZerobss>

0800065e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800065e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000660:	3204      	adds	r2, #4

08000662 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000662:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000664:	d3fb      	bcc.n	800065e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000666:	f7ff ffd7 	bl	8000618 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800066a:	f001 fcfb 	bl	8002064 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800066e:	f7ff fe9b 	bl	80003a8 <main>

08000672 <LoopForever>:

LoopForever:
    b LoopForever
 8000672:	e7fe      	b.n	8000672 <LoopForever>
  ldr   r0, =_estack
 8000674:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8000678:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800067c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000680:	080020dc 	.word	0x080020dc
  ldr r2, =_sbss
 8000684:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000688:	20000090 	.word	0x20000090

0800068c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800068c:	e7fe      	b.n	800068c <ADC1_2_IRQHandler>

0800068e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800068e:	b580      	push	{r7, lr}
 8000690:	b082      	sub	sp, #8
 8000692:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000694:	2300      	movs	r3, #0
 8000696:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000698:	2003      	movs	r0, #3
 800069a:	f000 f93d 	bl	8000918 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800069e:	200f      	movs	r0, #15
 80006a0:	f000 f80e 	bl	80006c0 <HAL_InitTick>
 80006a4:	4603      	mov	r3, r0
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	d002      	beq.n	80006b0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80006aa:	2301      	movs	r3, #1
 80006ac:	71fb      	strb	r3, [r7, #7]
 80006ae:	e001      	b.n	80006b4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80006b0:	f7ff ff5e 	bl	8000570 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80006b4:	79fb      	ldrb	r3, [r7, #7]

}
 80006b6:	4618      	mov	r0, r3
 80006b8:	3708      	adds	r7, #8
 80006ba:	46bd      	mov	sp, r7
 80006bc:	bd80      	pop	{r7, pc}
	...

080006c0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b084      	sub	sp, #16
 80006c4:	af00      	add	r7, sp, #0
 80006c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80006c8:	2300      	movs	r3, #0
 80006ca:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80006cc:	4b16      	ldr	r3, [pc, #88]	@ (8000728 <HAL_InitTick+0x68>)
 80006ce:	681b      	ldr	r3, [r3, #0]
 80006d0:	2b00      	cmp	r3, #0
 80006d2:	d022      	beq.n	800071a <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80006d4:	4b15      	ldr	r3, [pc, #84]	@ (800072c <HAL_InitTick+0x6c>)
 80006d6:	681a      	ldr	r2, [r3, #0]
 80006d8:	4b13      	ldr	r3, [pc, #76]	@ (8000728 <HAL_InitTick+0x68>)
 80006da:	681b      	ldr	r3, [r3, #0]
 80006dc:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80006e0:	fbb1 f3f3 	udiv	r3, r1, r3
 80006e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80006e8:	4618      	mov	r0, r3
 80006ea:	f000 f93a 	bl	8000962 <HAL_SYSTICK_Config>
 80006ee:	4603      	mov	r3, r0
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	d10f      	bne.n	8000714 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	2b0f      	cmp	r3, #15
 80006f8:	d809      	bhi.n	800070e <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80006fa:	2200      	movs	r2, #0
 80006fc:	6879      	ldr	r1, [r7, #4]
 80006fe:	f04f 30ff 	mov.w	r0, #4294967295
 8000702:	f000 f914 	bl	800092e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000706:	4a0a      	ldr	r2, [pc, #40]	@ (8000730 <HAL_InitTick+0x70>)
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	6013      	str	r3, [r2, #0]
 800070c:	e007      	b.n	800071e <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800070e:	2301      	movs	r3, #1
 8000710:	73fb      	strb	r3, [r7, #15]
 8000712:	e004      	b.n	800071e <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000714:	2301      	movs	r3, #1
 8000716:	73fb      	strb	r3, [r7, #15]
 8000718:	e001      	b.n	800071e <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800071a:	2301      	movs	r3, #1
 800071c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800071e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000720:	4618      	mov	r0, r3
 8000722:	3710      	adds	r7, #16
 8000724:	46bd      	mov	sp, r7
 8000726:	bd80      	pop	{r7, pc}
 8000728:	20000008 	.word	0x20000008
 800072c:	20000000 	.word	0x20000000
 8000730:	20000004 	.word	0x20000004

08000734 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000734:	b480      	push	{r7}
 8000736:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000738:	4b05      	ldr	r3, [pc, #20]	@ (8000750 <HAL_IncTick+0x1c>)
 800073a:	681a      	ldr	r2, [r3, #0]
 800073c:	4b05      	ldr	r3, [pc, #20]	@ (8000754 <HAL_IncTick+0x20>)
 800073e:	681b      	ldr	r3, [r3, #0]
 8000740:	4413      	add	r3, r2
 8000742:	4a03      	ldr	r2, [pc, #12]	@ (8000750 <HAL_IncTick+0x1c>)
 8000744:	6013      	str	r3, [r2, #0]
}
 8000746:	bf00      	nop
 8000748:	46bd      	mov	sp, r7
 800074a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800074e:	4770      	bx	lr
 8000750:	2000008c 	.word	0x2000008c
 8000754:	20000008 	.word	0x20000008

08000758 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000758:	b480      	push	{r7}
 800075a:	af00      	add	r7, sp, #0
  return uwTick;
 800075c:	4b03      	ldr	r3, [pc, #12]	@ (800076c <HAL_GetTick+0x14>)
 800075e:	681b      	ldr	r3, [r3, #0]
}
 8000760:	4618      	mov	r0, r3
 8000762:	46bd      	mov	sp, r7
 8000764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000768:	4770      	bx	lr
 800076a:	bf00      	nop
 800076c:	2000008c 	.word	0x2000008c

08000770 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	b084      	sub	sp, #16
 8000774:	af00      	add	r7, sp, #0
 8000776:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000778:	f7ff ffee 	bl	8000758 <HAL_GetTick>
 800077c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800077e:	687b      	ldr	r3, [r7, #4]
 8000780:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000782:	68fb      	ldr	r3, [r7, #12]
 8000784:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000788:	d004      	beq.n	8000794 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 800078a:	4b09      	ldr	r3, [pc, #36]	@ (80007b0 <HAL_Delay+0x40>)
 800078c:	681b      	ldr	r3, [r3, #0]
 800078e:	68fa      	ldr	r2, [r7, #12]
 8000790:	4413      	add	r3, r2
 8000792:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000794:	bf00      	nop
 8000796:	f7ff ffdf 	bl	8000758 <HAL_GetTick>
 800079a:	4602      	mov	r2, r0
 800079c:	68bb      	ldr	r3, [r7, #8]
 800079e:	1ad3      	subs	r3, r2, r3
 80007a0:	68fa      	ldr	r2, [r7, #12]
 80007a2:	429a      	cmp	r2, r3
 80007a4:	d8f7      	bhi.n	8000796 <HAL_Delay+0x26>
  {
  }
}
 80007a6:	bf00      	nop
 80007a8:	bf00      	nop
 80007aa:	3710      	adds	r7, #16
 80007ac:	46bd      	mov	sp, r7
 80007ae:	bd80      	pop	{r7, pc}
 80007b0:	20000008 	.word	0x20000008

080007b4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80007b4:	b480      	push	{r7}
 80007b6:	b085      	sub	sp, #20
 80007b8:	af00      	add	r7, sp, #0
 80007ba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	f003 0307 	and.w	r3, r3, #7
 80007c2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80007c4:	4b0c      	ldr	r3, [pc, #48]	@ (80007f8 <__NVIC_SetPriorityGrouping+0x44>)
 80007c6:	68db      	ldr	r3, [r3, #12]
 80007c8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80007ca:	68ba      	ldr	r2, [r7, #8]
 80007cc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80007d0:	4013      	ands	r3, r2
 80007d2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80007d4:	68fb      	ldr	r3, [r7, #12]
 80007d6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80007d8:	68bb      	ldr	r3, [r7, #8]
 80007da:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80007dc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80007e0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80007e4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80007e6:	4a04      	ldr	r2, [pc, #16]	@ (80007f8 <__NVIC_SetPriorityGrouping+0x44>)
 80007e8:	68bb      	ldr	r3, [r7, #8]
 80007ea:	60d3      	str	r3, [r2, #12]
}
 80007ec:	bf00      	nop
 80007ee:	3714      	adds	r7, #20
 80007f0:	46bd      	mov	sp, r7
 80007f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f6:	4770      	bx	lr
 80007f8:	e000ed00 	.word	0xe000ed00

080007fc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80007fc:	b480      	push	{r7}
 80007fe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000800:	4b04      	ldr	r3, [pc, #16]	@ (8000814 <__NVIC_GetPriorityGrouping+0x18>)
 8000802:	68db      	ldr	r3, [r3, #12]
 8000804:	0a1b      	lsrs	r3, r3, #8
 8000806:	f003 0307 	and.w	r3, r3, #7
}
 800080a:	4618      	mov	r0, r3
 800080c:	46bd      	mov	sp, r7
 800080e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000812:	4770      	bx	lr
 8000814:	e000ed00 	.word	0xe000ed00

08000818 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000818:	b480      	push	{r7}
 800081a:	b083      	sub	sp, #12
 800081c:	af00      	add	r7, sp, #0
 800081e:	4603      	mov	r3, r0
 8000820:	6039      	str	r1, [r7, #0]
 8000822:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000824:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000828:	2b00      	cmp	r3, #0
 800082a:	db0a      	blt.n	8000842 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800082c:	683b      	ldr	r3, [r7, #0]
 800082e:	b2da      	uxtb	r2, r3
 8000830:	490c      	ldr	r1, [pc, #48]	@ (8000864 <__NVIC_SetPriority+0x4c>)
 8000832:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000836:	0112      	lsls	r2, r2, #4
 8000838:	b2d2      	uxtb	r2, r2
 800083a:	440b      	add	r3, r1
 800083c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000840:	e00a      	b.n	8000858 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000842:	683b      	ldr	r3, [r7, #0]
 8000844:	b2da      	uxtb	r2, r3
 8000846:	4908      	ldr	r1, [pc, #32]	@ (8000868 <__NVIC_SetPriority+0x50>)
 8000848:	79fb      	ldrb	r3, [r7, #7]
 800084a:	f003 030f 	and.w	r3, r3, #15
 800084e:	3b04      	subs	r3, #4
 8000850:	0112      	lsls	r2, r2, #4
 8000852:	b2d2      	uxtb	r2, r2
 8000854:	440b      	add	r3, r1
 8000856:	761a      	strb	r2, [r3, #24]
}
 8000858:	bf00      	nop
 800085a:	370c      	adds	r7, #12
 800085c:	46bd      	mov	sp, r7
 800085e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000862:	4770      	bx	lr
 8000864:	e000e100 	.word	0xe000e100
 8000868:	e000ed00 	.word	0xe000ed00

0800086c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800086c:	b480      	push	{r7}
 800086e:	b089      	sub	sp, #36	@ 0x24
 8000870:	af00      	add	r7, sp, #0
 8000872:	60f8      	str	r0, [r7, #12]
 8000874:	60b9      	str	r1, [r7, #8]
 8000876:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000878:	68fb      	ldr	r3, [r7, #12]
 800087a:	f003 0307 	and.w	r3, r3, #7
 800087e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000880:	69fb      	ldr	r3, [r7, #28]
 8000882:	f1c3 0307 	rsb	r3, r3, #7
 8000886:	2b04      	cmp	r3, #4
 8000888:	bf28      	it	cs
 800088a:	2304      	movcs	r3, #4
 800088c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800088e:	69fb      	ldr	r3, [r7, #28]
 8000890:	3304      	adds	r3, #4
 8000892:	2b06      	cmp	r3, #6
 8000894:	d902      	bls.n	800089c <NVIC_EncodePriority+0x30>
 8000896:	69fb      	ldr	r3, [r7, #28]
 8000898:	3b03      	subs	r3, #3
 800089a:	e000      	b.n	800089e <NVIC_EncodePriority+0x32>
 800089c:	2300      	movs	r3, #0
 800089e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80008a0:	f04f 32ff 	mov.w	r2, #4294967295
 80008a4:	69bb      	ldr	r3, [r7, #24]
 80008a6:	fa02 f303 	lsl.w	r3, r2, r3
 80008aa:	43da      	mvns	r2, r3
 80008ac:	68bb      	ldr	r3, [r7, #8]
 80008ae:	401a      	ands	r2, r3
 80008b0:	697b      	ldr	r3, [r7, #20]
 80008b2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80008b4:	f04f 31ff 	mov.w	r1, #4294967295
 80008b8:	697b      	ldr	r3, [r7, #20]
 80008ba:	fa01 f303 	lsl.w	r3, r1, r3
 80008be:	43d9      	mvns	r1, r3
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80008c4:	4313      	orrs	r3, r2
         );
}
 80008c6:	4618      	mov	r0, r3
 80008c8:	3724      	adds	r7, #36	@ 0x24
 80008ca:	46bd      	mov	sp, r7
 80008cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d0:	4770      	bx	lr
	...

080008d4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b082      	sub	sp, #8
 80008d8:	af00      	add	r7, sp, #0
 80008da:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	3b01      	subs	r3, #1
 80008e0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80008e4:	d301      	bcc.n	80008ea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80008e6:	2301      	movs	r3, #1
 80008e8:	e00f      	b.n	800090a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80008ea:	4a0a      	ldr	r2, [pc, #40]	@ (8000914 <SysTick_Config+0x40>)
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	3b01      	subs	r3, #1
 80008f0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80008f2:	210f      	movs	r1, #15
 80008f4:	f04f 30ff 	mov.w	r0, #4294967295
 80008f8:	f7ff ff8e 	bl	8000818 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80008fc:	4b05      	ldr	r3, [pc, #20]	@ (8000914 <SysTick_Config+0x40>)
 80008fe:	2200      	movs	r2, #0
 8000900:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000902:	4b04      	ldr	r3, [pc, #16]	@ (8000914 <SysTick_Config+0x40>)
 8000904:	2207      	movs	r2, #7
 8000906:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000908:	2300      	movs	r3, #0
}
 800090a:	4618      	mov	r0, r3
 800090c:	3708      	adds	r7, #8
 800090e:	46bd      	mov	sp, r7
 8000910:	bd80      	pop	{r7, pc}
 8000912:	bf00      	nop
 8000914:	e000e010 	.word	0xe000e010

08000918 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	b082      	sub	sp, #8
 800091c:	af00      	add	r7, sp, #0
 800091e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000920:	6878      	ldr	r0, [r7, #4]
 8000922:	f7ff ff47 	bl	80007b4 <__NVIC_SetPriorityGrouping>
}
 8000926:	bf00      	nop
 8000928:	3708      	adds	r7, #8
 800092a:	46bd      	mov	sp, r7
 800092c:	bd80      	pop	{r7, pc}

0800092e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800092e:	b580      	push	{r7, lr}
 8000930:	b086      	sub	sp, #24
 8000932:	af00      	add	r7, sp, #0
 8000934:	4603      	mov	r3, r0
 8000936:	60b9      	str	r1, [r7, #8]
 8000938:	607a      	str	r2, [r7, #4]
 800093a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800093c:	f7ff ff5e 	bl	80007fc <__NVIC_GetPriorityGrouping>
 8000940:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000942:	687a      	ldr	r2, [r7, #4]
 8000944:	68b9      	ldr	r1, [r7, #8]
 8000946:	6978      	ldr	r0, [r7, #20]
 8000948:	f7ff ff90 	bl	800086c <NVIC_EncodePriority>
 800094c:	4602      	mov	r2, r0
 800094e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000952:	4611      	mov	r1, r2
 8000954:	4618      	mov	r0, r3
 8000956:	f7ff ff5f 	bl	8000818 <__NVIC_SetPriority>
}
 800095a:	bf00      	nop
 800095c:	3718      	adds	r7, #24
 800095e:	46bd      	mov	sp, r7
 8000960:	bd80      	pop	{r7, pc}

08000962 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000962:	b580      	push	{r7, lr}
 8000964:	b082      	sub	sp, #8
 8000966:	af00      	add	r7, sp, #0
 8000968:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800096a:	6878      	ldr	r0, [r7, #4]
 800096c:	f7ff ffb2 	bl	80008d4 <SysTick_Config>
 8000970:	4603      	mov	r3, r0
}
 8000972:	4618      	mov	r0, r3
 8000974:	3708      	adds	r7, #8
 8000976:	46bd      	mov	sp, r7
 8000978:	bd80      	pop	{r7, pc}
	...

0800097c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800097c:	b480      	push	{r7}
 800097e:	b087      	sub	sp, #28
 8000980:	af00      	add	r7, sp, #0
 8000982:	6078      	str	r0, [r7, #4]
 8000984:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000986:	2300      	movs	r3, #0
 8000988:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800098a:	e15a      	b.n	8000c42 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800098c:	683b      	ldr	r3, [r7, #0]
 800098e:	681a      	ldr	r2, [r3, #0]
 8000990:	2101      	movs	r1, #1
 8000992:	697b      	ldr	r3, [r7, #20]
 8000994:	fa01 f303 	lsl.w	r3, r1, r3
 8000998:	4013      	ands	r3, r2
 800099a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800099c:	68fb      	ldr	r3, [r7, #12]
 800099e:	2b00      	cmp	r3, #0
 80009a0:	f000 814c 	beq.w	8000c3c <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80009a4:	683b      	ldr	r3, [r7, #0]
 80009a6:	685b      	ldr	r3, [r3, #4]
 80009a8:	f003 0303 	and.w	r3, r3, #3
 80009ac:	2b01      	cmp	r3, #1
 80009ae:	d005      	beq.n	80009bc <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80009b0:	683b      	ldr	r3, [r7, #0]
 80009b2:	685b      	ldr	r3, [r3, #4]
 80009b4:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80009b8:	2b02      	cmp	r3, #2
 80009ba:	d130      	bne.n	8000a1e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	689b      	ldr	r3, [r3, #8]
 80009c0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80009c2:	697b      	ldr	r3, [r7, #20]
 80009c4:	005b      	lsls	r3, r3, #1
 80009c6:	2203      	movs	r2, #3
 80009c8:	fa02 f303 	lsl.w	r3, r2, r3
 80009cc:	43db      	mvns	r3, r3
 80009ce:	693a      	ldr	r2, [r7, #16]
 80009d0:	4013      	ands	r3, r2
 80009d2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80009d4:	683b      	ldr	r3, [r7, #0]
 80009d6:	68da      	ldr	r2, [r3, #12]
 80009d8:	697b      	ldr	r3, [r7, #20]
 80009da:	005b      	lsls	r3, r3, #1
 80009dc:	fa02 f303 	lsl.w	r3, r2, r3
 80009e0:	693a      	ldr	r2, [r7, #16]
 80009e2:	4313      	orrs	r3, r2
 80009e4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	693a      	ldr	r2, [r7, #16]
 80009ea:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	685b      	ldr	r3, [r3, #4]
 80009f0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80009f2:	2201      	movs	r2, #1
 80009f4:	697b      	ldr	r3, [r7, #20]
 80009f6:	fa02 f303 	lsl.w	r3, r2, r3
 80009fa:	43db      	mvns	r3, r3
 80009fc:	693a      	ldr	r2, [r7, #16]
 80009fe:	4013      	ands	r3, r2
 8000a00:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000a02:	683b      	ldr	r3, [r7, #0]
 8000a04:	685b      	ldr	r3, [r3, #4]
 8000a06:	091b      	lsrs	r3, r3, #4
 8000a08:	f003 0201 	and.w	r2, r3, #1
 8000a0c:	697b      	ldr	r3, [r7, #20]
 8000a0e:	fa02 f303 	lsl.w	r3, r2, r3
 8000a12:	693a      	ldr	r2, [r7, #16]
 8000a14:	4313      	orrs	r3, r2
 8000a16:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	693a      	ldr	r2, [r7, #16]
 8000a1c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000a1e:	683b      	ldr	r3, [r7, #0]
 8000a20:	685b      	ldr	r3, [r3, #4]
 8000a22:	f003 0303 	and.w	r3, r3, #3
 8000a26:	2b03      	cmp	r3, #3
 8000a28:	d017      	beq.n	8000a5a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	68db      	ldr	r3, [r3, #12]
 8000a2e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000a30:	697b      	ldr	r3, [r7, #20]
 8000a32:	005b      	lsls	r3, r3, #1
 8000a34:	2203      	movs	r2, #3
 8000a36:	fa02 f303 	lsl.w	r3, r2, r3
 8000a3a:	43db      	mvns	r3, r3
 8000a3c:	693a      	ldr	r2, [r7, #16]
 8000a3e:	4013      	ands	r3, r2
 8000a40:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000a42:	683b      	ldr	r3, [r7, #0]
 8000a44:	689a      	ldr	r2, [r3, #8]
 8000a46:	697b      	ldr	r3, [r7, #20]
 8000a48:	005b      	lsls	r3, r3, #1
 8000a4a:	fa02 f303 	lsl.w	r3, r2, r3
 8000a4e:	693a      	ldr	r2, [r7, #16]
 8000a50:	4313      	orrs	r3, r2
 8000a52:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	693a      	ldr	r2, [r7, #16]
 8000a58:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000a5a:	683b      	ldr	r3, [r7, #0]
 8000a5c:	685b      	ldr	r3, [r3, #4]
 8000a5e:	f003 0303 	and.w	r3, r3, #3
 8000a62:	2b02      	cmp	r3, #2
 8000a64:	d123      	bne.n	8000aae <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000a66:	697b      	ldr	r3, [r7, #20]
 8000a68:	08da      	lsrs	r2, r3, #3
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	3208      	adds	r2, #8
 8000a6e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000a72:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8000a74:	697b      	ldr	r3, [r7, #20]
 8000a76:	f003 0307 	and.w	r3, r3, #7
 8000a7a:	009b      	lsls	r3, r3, #2
 8000a7c:	220f      	movs	r2, #15
 8000a7e:	fa02 f303 	lsl.w	r3, r2, r3
 8000a82:	43db      	mvns	r3, r3
 8000a84:	693a      	ldr	r2, [r7, #16]
 8000a86:	4013      	ands	r3, r2
 8000a88:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8000a8a:	683b      	ldr	r3, [r7, #0]
 8000a8c:	691a      	ldr	r2, [r3, #16]
 8000a8e:	697b      	ldr	r3, [r7, #20]
 8000a90:	f003 0307 	and.w	r3, r3, #7
 8000a94:	009b      	lsls	r3, r3, #2
 8000a96:	fa02 f303 	lsl.w	r3, r2, r3
 8000a9a:	693a      	ldr	r2, [r7, #16]
 8000a9c:	4313      	orrs	r3, r2
 8000a9e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8000aa0:	697b      	ldr	r3, [r7, #20]
 8000aa2:	08da      	lsrs	r2, r3, #3
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	3208      	adds	r2, #8
 8000aa8:	6939      	ldr	r1, [r7, #16]
 8000aaa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	681b      	ldr	r3, [r3, #0]
 8000ab2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000ab4:	697b      	ldr	r3, [r7, #20]
 8000ab6:	005b      	lsls	r3, r3, #1
 8000ab8:	2203      	movs	r2, #3
 8000aba:	fa02 f303 	lsl.w	r3, r2, r3
 8000abe:	43db      	mvns	r3, r3
 8000ac0:	693a      	ldr	r2, [r7, #16]
 8000ac2:	4013      	ands	r3, r2
 8000ac4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000ac6:	683b      	ldr	r3, [r7, #0]
 8000ac8:	685b      	ldr	r3, [r3, #4]
 8000aca:	f003 0203 	and.w	r2, r3, #3
 8000ace:	697b      	ldr	r3, [r7, #20]
 8000ad0:	005b      	lsls	r3, r3, #1
 8000ad2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ad6:	693a      	ldr	r2, [r7, #16]
 8000ad8:	4313      	orrs	r3, r2
 8000ada:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	693a      	ldr	r2, [r7, #16]
 8000ae0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000ae2:	683b      	ldr	r3, [r7, #0]
 8000ae4:	685b      	ldr	r3, [r3, #4]
 8000ae6:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	f000 80a6 	beq.w	8000c3c <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000af0:	4b5b      	ldr	r3, [pc, #364]	@ (8000c60 <HAL_GPIO_Init+0x2e4>)
 8000af2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000af4:	4a5a      	ldr	r2, [pc, #360]	@ (8000c60 <HAL_GPIO_Init+0x2e4>)
 8000af6:	f043 0301 	orr.w	r3, r3, #1
 8000afa:	6613      	str	r3, [r2, #96]	@ 0x60
 8000afc:	4b58      	ldr	r3, [pc, #352]	@ (8000c60 <HAL_GPIO_Init+0x2e4>)
 8000afe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000b00:	f003 0301 	and.w	r3, r3, #1
 8000b04:	60bb      	str	r3, [r7, #8]
 8000b06:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000b08:	4a56      	ldr	r2, [pc, #344]	@ (8000c64 <HAL_GPIO_Init+0x2e8>)
 8000b0a:	697b      	ldr	r3, [r7, #20]
 8000b0c:	089b      	lsrs	r3, r3, #2
 8000b0e:	3302      	adds	r3, #2
 8000b10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b14:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8000b16:	697b      	ldr	r3, [r7, #20]
 8000b18:	f003 0303 	and.w	r3, r3, #3
 8000b1c:	009b      	lsls	r3, r3, #2
 8000b1e:	220f      	movs	r2, #15
 8000b20:	fa02 f303 	lsl.w	r3, r2, r3
 8000b24:	43db      	mvns	r3, r3
 8000b26:	693a      	ldr	r2, [r7, #16]
 8000b28:	4013      	ands	r3, r2
 8000b2a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8000b32:	d01f      	beq.n	8000b74 <HAL_GPIO_Init+0x1f8>
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	4a4c      	ldr	r2, [pc, #304]	@ (8000c68 <HAL_GPIO_Init+0x2ec>)
 8000b38:	4293      	cmp	r3, r2
 8000b3a:	d019      	beq.n	8000b70 <HAL_GPIO_Init+0x1f4>
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	4a4b      	ldr	r2, [pc, #300]	@ (8000c6c <HAL_GPIO_Init+0x2f0>)
 8000b40:	4293      	cmp	r3, r2
 8000b42:	d013      	beq.n	8000b6c <HAL_GPIO_Init+0x1f0>
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	4a4a      	ldr	r2, [pc, #296]	@ (8000c70 <HAL_GPIO_Init+0x2f4>)
 8000b48:	4293      	cmp	r3, r2
 8000b4a:	d00d      	beq.n	8000b68 <HAL_GPIO_Init+0x1ec>
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	4a49      	ldr	r2, [pc, #292]	@ (8000c74 <HAL_GPIO_Init+0x2f8>)
 8000b50:	4293      	cmp	r3, r2
 8000b52:	d007      	beq.n	8000b64 <HAL_GPIO_Init+0x1e8>
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	4a48      	ldr	r2, [pc, #288]	@ (8000c78 <HAL_GPIO_Init+0x2fc>)
 8000b58:	4293      	cmp	r3, r2
 8000b5a:	d101      	bne.n	8000b60 <HAL_GPIO_Init+0x1e4>
 8000b5c:	2305      	movs	r3, #5
 8000b5e:	e00a      	b.n	8000b76 <HAL_GPIO_Init+0x1fa>
 8000b60:	2306      	movs	r3, #6
 8000b62:	e008      	b.n	8000b76 <HAL_GPIO_Init+0x1fa>
 8000b64:	2304      	movs	r3, #4
 8000b66:	e006      	b.n	8000b76 <HAL_GPIO_Init+0x1fa>
 8000b68:	2303      	movs	r3, #3
 8000b6a:	e004      	b.n	8000b76 <HAL_GPIO_Init+0x1fa>
 8000b6c:	2302      	movs	r3, #2
 8000b6e:	e002      	b.n	8000b76 <HAL_GPIO_Init+0x1fa>
 8000b70:	2301      	movs	r3, #1
 8000b72:	e000      	b.n	8000b76 <HAL_GPIO_Init+0x1fa>
 8000b74:	2300      	movs	r3, #0
 8000b76:	697a      	ldr	r2, [r7, #20]
 8000b78:	f002 0203 	and.w	r2, r2, #3
 8000b7c:	0092      	lsls	r2, r2, #2
 8000b7e:	4093      	lsls	r3, r2
 8000b80:	693a      	ldr	r2, [r7, #16]
 8000b82:	4313      	orrs	r3, r2
 8000b84:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000b86:	4937      	ldr	r1, [pc, #220]	@ (8000c64 <HAL_GPIO_Init+0x2e8>)
 8000b88:	697b      	ldr	r3, [r7, #20]
 8000b8a:	089b      	lsrs	r3, r3, #2
 8000b8c:	3302      	adds	r3, #2
 8000b8e:	693a      	ldr	r2, [r7, #16]
 8000b90:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000b94:	4b39      	ldr	r3, [pc, #228]	@ (8000c7c <HAL_GPIO_Init+0x300>)
 8000b96:	689b      	ldr	r3, [r3, #8]
 8000b98:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b9a:	68fb      	ldr	r3, [r7, #12]
 8000b9c:	43db      	mvns	r3, r3
 8000b9e:	693a      	ldr	r2, [r7, #16]
 8000ba0:	4013      	ands	r3, r2
 8000ba2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000ba4:	683b      	ldr	r3, [r7, #0]
 8000ba6:	685b      	ldr	r3, [r3, #4]
 8000ba8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	d003      	beq.n	8000bb8 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8000bb0:	693a      	ldr	r2, [r7, #16]
 8000bb2:	68fb      	ldr	r3, [r7, #12]
 8000bb4:	4313      	orrs	r3, r2
 8000bb6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000bb8:	4a30      	ldr	r2, [pc, #192]	@ (8000c7c <HAL_GPIO_Init+0x300>)
 8000bba:	693b      	ldr	r3, [r7, #16]
 8000bbc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000bbe:	4b2f      	ldr	r3, [pc, #188]	@ (8000c7c <HAL_GPIO_Init+0x300>)
 8000bc0:	68db      	ldr	r3, [r3, #12]
 8000bc2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000bc4:	68fb      	ldr	r3, [r7, #12]
 8000bc6:	43db      	mvns	r3, r3
 8000bc8:	693a      	ldr	r2, [r7, #16]
 8000bca:	4013      	ands	r3, r2
 8000bcc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000bce:	683b      	ldr	r3, [r7, #0]
 8000bd0:	685b      	ldr	r3, [r3, #4]
 8000bd2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	d003      	beq.n	8000be2 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8000bda:	693a      	ldr	r2, [r7, #16]
 8000bdc:	68fb      	ldr	r3, [r7, #12]
 8000bde:	4313      	orrs	r3, r2
 8000be0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000be2:	4a26      	ldr	r2, [pc, #152]	@ (8000c7c <HAL_GPIO_Init+0x300>)
 8000be4:	693b      	ldr	r3, [r7, #16]
 8000be6:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8000be8:	4b24      	ldr	r3, [pc, #144]	@ (8000c7c <HAL_GPIO_Init+0x300>)
 8000bea:	685b      	ldr	r3, [r3, #4]
 8000bec:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000bee:	68fb      	ldr	r3, [r7, #12]
 8000bf0:	43db      	mvns	r3, r3
 8000bf2:	693a      	ldr	r2, [r7, #16]
 8000bf4:	4013      	ands	r3, r2
 8000bf6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000bf8:	683b      	ldr	r3, [r7, #0]
 8000bfa:	685b      	ldr	r3, [r3, #4]
 8000bfc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d003      	beq.n	8000c0c <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8000c04:	693a      	ldr	r2, [r7, #16]
 8000c06:	68fb      	ldr	r3, [r7, #12]
 8000c08:	4313      	orrs	r3, r2
 8000c0a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000c0c:	4a1b      	ldr	r2, [pc, #108]	@ (8000c7c <HAL_GPIO_Init+0x300>)
 8000c0e:	693b      	ldr	r3, [r7, #16]
 8000c10:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8000c12:	4b1a      	ldr	r3, [pc, #104]	@ (8000c7c <HAL_GPIO_Init+0x300>)
 8000c14:	681b      	ldr	r3, [r3, #0]
 8000c16:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c18:	68fb      	ldr	r3, [r7, #12]
 8000c1a:	43db      	mvns	r3, r3
 8000c1c:	693a      	ldr	r2, [r7, #16]
 8000c1e:	4013      	ands	r3, r2
 8000c20:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000c22:	683b      	ldr	r3, [r7, #0]
 8000c24:	685b      	ldr	r3, [r3, #4]
 8000c26:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	d003      	beq.n	8000c36 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8000c2e:	693a      	ldr	r2, [r7, #16]
 8000c30:	68fb      	ldr	r3, [r7, #12]
 8000c32:	4313      	orrs	r3, r2
 8000c34:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000c36:	4a11      	ldr	r2, [pc, #68]	@ (8000c7c <HAL_GPIO_Init+0x300>)
 8000c38:	693b      	ldr	r3, [r7, #16]
 8000c3a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000c3c:	697b      	ldr	r3, [r7, #20]
 8000c3e:	3301      	adds	r3, #1
 8000c40:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8000c42:	683b      	ldr	r3, [r7, #0]
 8000c44:	681a      	ldr	r2, [r3, #0]
 8000c46:	697b      	ldr	r3, [r7, #20]
 8000c48:	fa22 f303 	lsr.w	r3, r2, r3
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	f47f ae9d 	bne.w	800098c <HAL_GPIO_Init+0x10>
  }
}
 8000c52:	bf00      	nop
 8000c54:	bf00      	nop
 8000c56:	371c      	adds	r7, #28
 8000c58:	46bd      	mov	sp, r7
 8000c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c5e:	4770      	bx	lr
 8000c60:	40021000 	.word	0x40021000
 8000c64:	40010000 	.word	0x40010000
 8000c68:	48000400 	.word	0x48000400
 8000c6c:	48000800 	.word	0x48000800
 8000c70:	48000c00 	.word	0x48000c00
 8000c74:	48001000 	.word	0x48001000
 8000c78:	48001400 	.word	0x48001400
 8000c7c:	40010400 	.word	0x40010400

08000c80 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000c80:	b480      	push	{r7}
 8000c82:	b083      	sub	sp, #12
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	6078      	str	r0, [r7, #4]
 8000c88:	460b      	mov	r3, r1
 8000c8a:	807b      	strh	r3, [r7, #2]
 8000c8c:	4613      	mov	r3, r2
 8000c8e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000c90:	787b      	ldrb	r3, [r7, #1]
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d003      	beq.n	8000c9e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000c96:	887a      	ldrh	r2, [r7, #2]
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000c9c:	e002      	b.n	8000ca4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000c9e:	887a      	ldrh	r2, [r7, #2]
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8000ca4:	bf00      	nop
 8000ca6:	370c      	adds	r7, #12
 8000ca8:	46bd      	mov	sp, r7
 8000caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cae:	4770      	bx	lr

08000cb0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000cb0:	b480      	push	{r7}
 8000cb2:	b085      	sub	sp, #20
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d141      	bne.n	8000d42 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8000cbe:	4b4b      	ldr	r3, [pc, #300]	@ (8000dec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000cc0:	681b      	ldr	r3, [r3, #0]
 8000cc2:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8000cc6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000cca:	d131      	bne.n	8000d30 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8000ccc:	4b47      	ldr	r3, [pc, #284]	@ (8000dec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000cce:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000cd2:	4a46      	ldr	r2, [pc, #280]	@ (8000dec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000cd4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8000cd8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000cdc:	4b43      	ldr	r3, [pc, #268]	@ (8000dec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8000ce4:	4a41      	ldr	r2, [pc, #260]	@ (8000dec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000ce6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000cea:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8000cec:	4b40      	ldr	r3, [pc, #256]	@ (8000df0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	2232      	movs	r2, #50	@ 0x32
 8000cf2:	fb02 f303 	mul.w	r3, r2, r3
 8000cf6:	4a3f      	ldr	r2, [pc, #252]	@ (8000df4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8000cf8:	fba2 2303 	umull	r2, r3, r2, r3
 8000cfc:	0c9b      	lsrs	r3, r3, #18
 8000cfe:	3301      	adds	r3, #1
 8000d00:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000d02:	e002      	b.n	8000d0a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8000d04:	68fb      	ldr	r3, [r7, #12]
 8000d06:	3b01      	subs	r3, #1
 8000d08:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000d0a:	4b38      	ldr	r3, [pc, #224]	@ (8000dec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000d0c:	695b      	ldr	r3, [r3, #20]
 8000d0e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000d12:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000d16:	d102      	bne.n	8000d1e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8000d18:	68fb      	ldr	r3, [r7, #12]
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	d1f2      	bne.n	8000d04 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000d1e:	4b33      	ldr	r3, [pc, #204]	@ (8000dec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000d20:	695b      	ldr	r3, [r3, #20]
 8000d22:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000d26:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000d2a:	d158      	bne.n	8000dde <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8000d2c:	2303      	movs	r3, #3
 8000d2e:	e057      	b.n	8000de0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8000d30:	4b2e      	ldr	r3, [pc, #184]	@ (8000dec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000d32:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000d36:	4a2d      	ldr	r2, [pc, #180]	@ (8000dec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000d38:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8000d3c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8000d40:	e04d      	b.n	8000dde <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8000d48:	d141      	bne.n	8000dce <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8000d4a:	4b28      	ldr	r3, [pc, #160]	@ (8000dec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8000d52:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000d56:	d131      	bne.n	8000dbc <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8000d58:	4b24      	ldr	r3, [pc, #144]	@ (8000dec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000d5a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000d5e:	4a23      	ldr	r2, [pc, #140]	@ (8000dec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000d60:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000d64:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000d68:	4b20      	ldr	r3, [pc, #128]	@ (8000dec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8000d70:	4a1e      	ldr	r2, [pc, #120]	@ (8000dec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000d72:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000d76:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8000d78:	4b1d      	ldr	r3, [pc, #116]	@ (8000df0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	2232      	movs	r2, #50	@ 0x32
 8000d7e:	fb02 f303 	mul.w	r3, r2, r3
 8000d82:	4a1c      	ldr	r2, [pc, #112]	@ (8000df4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8000d84:	fba2 2303 	umull	r2, r3, r2, r3
 8000d88:	0c9b      	lsrs	r3, r3, #18
 8000d8a:	3301      	adds	r3, #1
 8000d8c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000d8e:	e002      	b.n	8000d96 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8000d90:	68fb      	ldr	r3, [r7, #12]
 8000d92:	3b01      	subs	r3, #1
 8000d94:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000d96:	4b15      	ldr	r3, [pc, #84]	@ (8000dec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000d98:	695b      	ldr	r3, [r3, #20]
 8000d9a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000d9e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000da2:	d102      	bne.n	8000daa <HAL_PWREx_ControlVoltageScaling+0xfa>
 8000da4:	68fb      	ldr	r3, [r7, #12]
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d1f2      	bne.n	8000d90 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000daa:	4b10      	ldr	r3, [pc, #64]	@ (8000dec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000dac:	695b      	ldr	r3, [r3, #20]
 8000dae:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000db2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000db6:	d112      	bne.n	8000dde <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8000db8:	2303      	movs	r3, #3
 8000dba:	e011      	b.n	8000de0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8000dbc:	4b0b      	ldr	r3, [pc, #44]	@ (8000dec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000dbe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000dc2:	4a0a      	ldr	r2, [pc, #40]	@ (8000dec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000dc4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000dc8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8000dcc:	e007      	b.n	8000dde <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8000dce:	4b07      	ldr	r3, [pc, #28]	@ (8000dec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8000dd6:	4a05      	ldr	r2, [pc, #20]	@ (8000dec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000dd8:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000ddc:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8000dde:	2300      	movs	r3, #0
}
 8000de0:	4618      	mov	r0, r3
 8000de2:	3714      	adds	r7, #20
 8000de4:	46bd      	mov	sp, r7
 8000de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dea:	4770      	bx	lr
 8000dec:	40007000 	.word	0x40007000
 8000df0:	20000000 	.word	0x20000000
 8000df4:	431bde83 	.word	0x431bde83

08000df8 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8000df8:	b480      	push	{r7}
 8000dfa:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8000dfc:	4b05      	ldr	r3, [pc, #20]	@ (8000e14 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8000dfe:	689b      	ldr	r3, [r3, #8]
 8000e00:	4a04      	ldr	r2, [pc, #16]	@ (8000e14 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8000e02:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000e06:	6093      	str	r3, [r2, #8]
}
 8000e08:	bf00      	nop
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e10:	4770      	bx	lr
 8000e12:	bf00      	nop
 8000e14:	40007000 	.word	0x40007000

08000e18 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b088      	sub	sp, #32
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d101      	bne.n	8000e2a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000e26:	2301      	movs	r3, #1
 8000e28:	e306      	b.n	8001438 <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	f003 0301 	and.w	r3, r3, #1
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d075      	beq.n	8000f22 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000e36:	4b97      	ldr	r3, [pc, #604]	@ (8001094 <HAL_RCC_OscConfig+0x27c>)
 8000e38:	689b      	ldr	r3, [r3, #8]
 8000e3a:	f003 030c 	and.w	r3, r3, #12
 8000e3e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000e40:	4b94      	ldr	r3, [pc, #592]	@ (8001094 <HAL_RCC_OscConfig+0x27c>)
 8000e42:	68db      	ldr	r3, [r3, #12]
 8000e44:	f003 0303 	and.w	r3, r3, #3
 8000e48:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8000e4a:	69bb      	ldr	r3, [r7, #24]
 8000e4c:	2b0c      	cmp	r3, #12
 8000e4e:	d102      	bne.n	8000e56 <HAL_RCC_OscConfig+0x3e>
 8000e50:	697b      	ldr	r3, [r7, #20]
 8000e52:	2b03      	cmp	r3, #3
 8000e54:	d002      	beq.n	8000e5c <HAL_RCC_OscConfig+0x44>
 8000e56:	69bb      	ldr	r3, [r7, #24]
 8000e58:	2b08      	cmp	r3, #8
 8000e5a:	d10b      	bne.n	8000e74 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e5c:	4b8d      	ldr	r3, [pc, #564]	@ (8001094 <HAL_RCC_OscConfig+0x27c>)
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	d05b      	beq.n	8000f20 <HAL_RCC_OscConfig+0x108>
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	685b      	ldr	r3, [r3, #4]
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	d157      	bne.n	8000f20 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8000e70:	2301      	movs	r3, #1
 8000e72:	e2e1      	b.n	8001438 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	685b      	ldr	r3, [r3, #4]
 8000e78:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000e7c:	d106      	bne.n	8000e8c <HAL_RCC_OscConfig+0x74>
 8000e7e:	4b85      	ldr	r3, [pc, #532]	@ (8001094 <HAL_RCC_OscConfig+0x27c>)
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	4a84      	ldr	r2, [pc, #528]	@ (8001094 <HAL_RCC_OscConfig+0x27c>)
 8000e84:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000e88:	6013      	str	r3, [r2, #0]
 8000e8a:	e01d      	b.n	8000ec8 <HAL_RCC_OscConfig+0xb0>
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	685b      	ldr	r3, [r3, #4]
 8000e90:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8000e94:	d10c      	bne.n	8000eb0 <HAL_RCC_OscConfig+0x98>
 8000e96:	4b7f      	ldr	r3, [pc, #508]	@ (8001094 <HAL_RCC_OscConfig+0x27c>)
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	4a7e      	ldr	r2, [pc, #504]	@ (8001094 <HAL_RCC_OscConfig+0x27c>)
 8000e9c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000ea0:	6013      	str	r3, [r2, #0]
 8000ea2:	4b7c      	ldr	r3, [pc, #496]	@ (8001094 <HAL_RCC_OscConfig+0x27c>)
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	4a7b      	ldr	r2, [pc, #492]	@ (8001094 <HAL_RCC_OscConfig+0x27c>)
 8000ea8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000eac:	6013      	str	r3, [r2, #0]
 8000eae:	e00b      	b.n	8000ec8 <HAL_RCC_OscConfig+0xb0>
 8000eb0:	4b78      	ldr	r3, [pc, #480]	@ (8001094 <HAL_RCC_OscConfig+0x27c>)
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	4a77      	ldr	r2, [pc, #476]	@ (8001094 <HAL_RCC_OscConfig+0x27c>)
 8000eb6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000eba:	6013      	str	r3, [r2, #0]
 8000ebc:	4b75      	ldr	r3, [pc, #468]	@ (8001094 <HAL_RCC_OscConfig+0x27c>)
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	4a74      	ldr	r2, [pc, #464]	@ (8001094 <HAL_RCC_OscConfig+0x27c>)
 8000ec2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000ec6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	685b      	ldr	r3, [r3, #4]
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d013      	beq.n	8000ef8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000ed0:	f7ff fc42 	bl	8000758 <HAL_GetTick>
 8000ed4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000ed6:	e008      	b.n	8000eea <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000ed8:	f7ff fc3e 	bl	8000758 <HAL_GetTick>
 8000edc:	4602      	mov	r2, r0
 8000ede:	693b      	ldr	r3, [r7, #16]
 8000ee0:	1ad3      	subs	r3, r2, r3
 8000ee2:	2b64      	cmp	r3, #100	@ 0x64
 8000ee4:	d901      	bls.n	8000eea <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8000ee6:	2303      	movs	r3, #3
 8000ee8:	e2a6      	b.n	8001438 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000eea:	4b6a      	ldr	r3, [pc, #424]	@ (8001094 <HAL_RCC_OscConfig+0x27c>)
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d0f0      	beq.n	8000ed8 <HAL_RCC_OscConfig+0xc0>
 8000ef6:	e014      	b.n	8000f22 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000ef8:	f7ff fc2e 	bl	8000758 <HAL_GetTick>
 8000efc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000efe:	e008      	b.n	8000f12 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000f00:	f7ff fc2a 	bl	8000758 <HAL_GetTick>
 8000f04:	4602      	mov	r2, r0
 8000f06:	693b      	ldr	r3, [r7, #16]
 8000f08:	1ad3      	subs	r3, r2, r3
 8000f0a:	2b64      	cmp	r3, #100	@ 0x64
 8000f0c:	d901      	bls.n	8000f12 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8000f0e:	2303      	movs	r3, #3
 8000f10:	e292      	b.n	8001438 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000f12:	4b60      	ldr	r3, [pc, #384]	@ (8001094 <HAL_RCC_OscConfig+0x27c>)
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d1f0      	bne.n	8000f00 <HAL_RCC_OscConfig+0xe8>
 8000f1e:	e000      	b.n	8000f22 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f20:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	f003 0302 	and.w	r3, r3, #2
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d075      	beq.n	800101a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000f2e:	4b59      	ldr	r3, [pc, #356]	@ (8001094 <HAL_RCC_OscConfig+0x27c>)
 8000f30:	689b      	ldr	r3, [r3, #8]
 8000f32:	f003 030c 	and.w	r3, r3, #12
 8000f36:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000f38:	4b56      	ldr	r3, [pc, #344]	@ (8001094 <HAL_RCC_OscConfig+0x27c>)
 8000f3a:	68db      	ldr	r3, [r3, #12]
 8000f3c:	f003 0303 	and.w	r3, r3, #3
 8000f40:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8000f42:	69bb      	ldr	r3, [r7, #24]
 8000f44:	2b0c      	cmp	r3, #12
 8000f46:	d102      	bne.n	8000f4e <HAL_RCC_OscConfig+0x136>
 8000f48:	697b      	ldr	r3, [r7, #20]
 8000f4a:	2b02      	cmp	r3, #2
 8000f4c:	d002      	beq.n	8000f54 <HAL_RCC_OscConfig+0x13c>
 8000f4e:	69bb      	ldr	r3, [r7, #24]
 8000f50:	2b04      	cmp	r3, #4
 8000f52:	d11f      	bne.n	8000f94 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000f54:	4b4f      	ldr	r3, [pc, #316]	@ (8001094 <HAL_RCC_OscConfig+0x27c>)
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d005      	beq.n	8000f6c <HAL_RCC_OscConfig+0x154>
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	68db      	ldr	r3, [r3, #12]
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d101      	bne.n	8000f6c <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8000f68:	2301      	movs	r3, #1
 8000f6a:	e265      	b.n	8001438 <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f6c:	4b49      	ldr	r3, [pc, #292]	@ (8001094 <HAL_RCC_OscConfig+0x27c>)
 8000f6e:	685b      	ldr	r3, [r3, #4]
 8000f70:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	691b      	ldr	r3, [r3, #16]
 8000f78:	061b      	lsls	r3, r3, #24
 8000f7a:	4946      	ldr	r1, [pc, #280]	@ (8001094 <HAL_RCC_OscConfig+0x27c>)
 8000f7c:	4313      	orrs	r3, r2
 8000f7e:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8000f80:	4b45      	ldr	r3, [pc, #276]	@ (8001098 <HAL_RCC_OscConfig+0x280>)
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	4618      	mov	r0, r3
 8000f86:	f7ff fb9b 	bl	80006c0 <HAL_InitTick>
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d043      	beq.n	8001018 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8000f90:	2301      	movs	r3, #1
 8000f92:	e251      	b.n	8001438 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	68db      	ldr	r3, [r3, #12]
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d023      	beq.n	8000fe4 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000f9c:	4b3d      	ldr	r3, [pc, #244]	@ (8001094 <HAL_RCC_OscConfig+0x27c>)
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	4a3c      	ldr	r2, [pc, #240]	@ (8001094 <HAL_RCC_OscConfig+0x27c>)
 8000fa2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000fa6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000fa8:	f7ff fbd6 	bl	8000758 <HAL_GetTick>
 8000fac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8000fae:	e008      	b.n	8000fc2 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000fb0:	f7ff fbd2 	bl	8000758 <HAL_GetTick>
 8000fb4:	4602      	mov	r2, r0
 8000fb6:	693b      	ldr	r3, [r7, #16]
 8000fb8:	1ad3      	subs	r3, r2, r3
 8000fba:	2b02      	cmp	r3, #2
 8000fbc:	d901      	bls.n	8000fc2 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8000fbe:	2303      	movs	r3, #3
 8000fc0:	e23a      	b.n	8001438 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8000fc2:	4b34      	ldr	r3, [pc, #208]	@ (8001094 <HAL_RCC_OscConfig+0x27c>)
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d0f0      	beq.n	8000fb0 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000fce:	4b31      	ldr	r3, [pc, #196]	@ (8001094 <HAL_RCC_OscConfig+0x27c>)
 8000fd0:	685b      	ldr	r3, [r3, #4]
 8000fd2:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	691b      	ldr	r3, [r3, #16]
 8000fda:	061b      	lsls	r3, r3, #24
 8000fdc:	492d      	ldr	r1, [pc, #180]	@ (8001094 <HAL_RCC_OscConfig+0x27c>)
 8000fde:	4313      	orrs	r3, r2
 8000fe0:	604b      	str	r3, [r1, #4]
 8000fe2:	e01a      	b.n	800101a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000fe4:	4b2b      	ldr	r3, [pc, #172]	@ (8001094 <HAL_RCC_OscConfig+0x27c>)
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	4a2a      	ldr	r2, [pc, #168]	@ (8001094 <HAL_RCC_OscConfig+0x27c>)
 8000fea:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8000fee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000ff0:	f7ff fbb2 	bl	8000758 <HAL_GetTick>
 8000ff4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8000ff6:	e008      	b.n	800100a <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000ff8:	f7ff fbae 	bl	8000758 <HAL_GetTick>
 8000ffc:	4602      	mov	r2, r0
 8000ffe:	693b      	ldr	r3, [r7, #16]
 8001000:	1ad3      	subs	r3, r2, r3
 8001002:	2b02      	cmp	r3, #2
 8001004:	d901      	bls.n	800100a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8001006:	2303      	movs	r3, #3
 8001008:	e216      	b.n	8001438 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800100a:	4b22      	ldr	r3, [pc, #136]	@ (8001094 <HAL_RCC_OscConfig+0x27c>)
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001012:	2b00      	cmp	r3, #0
 8001014:	d1f0      	bne.n	8000ff8 <HAL_RCC_OscConfig+0x1e0>
 8001016:	e000      	b.n	800101a <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001018:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	f003 0308 	and.w	r3, r3, #8
 8001022:	2b00      	cmp	r3, #0
 8001024:	d041      	beq.n	80010aa <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	695b      	ldr	r3, [r3, #20]
 800102a:	2b00      	cmp	r3, #0
 800102c:	d01c      	beq.n	8001068 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800102e:	4b19      	ldr	r3, [pc, #100]	@ (8001094 <HAL_RCC_OscConfig+0x27c>)
 8001030:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001034:	4a17      	ldr	r2, [pc, #92]	@ (8001094 <HAL_RCC_OscConfig+0x27c>)
 8001036:	f043 0301 	orr.w	r3, r3, #1
 800103a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800103e:	f7ff fb8b 	bl	8000758 <HAL_GetTick>
 8001042:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001044:	e008      	b.n	8001058 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001046:	f7ff fb87 	bl	8000758 <HAL_GetTick>
 800104a:	4602      	mov	r2, r0
 800104c:	693b      	ldr	r3, [r7, #16]
 800104e:	1ad3      	subs	r3, r2, r3
 8001050:	2b02      	cmp	r3, #2
 8001052:	d901      	bls.n	8001058 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001054:	2303      	movs	r3, #3
 8001056:	e1ef      	b.n	8001438 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001058:	4b0e      	ldr	r3, [pc, #56]	@ (8001094 <HAL_RCC_OscConfig+0x27c>)
 800105a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800105e:	f003 0302 	and.w	r3, r3, #2
 8001062:	2b00      	cmp	r3, #0
 8001064:	d0ef      	beq.n	8001046 <HAL_RCC_OscConfig+0x22e>
 8001066:	e020      	b.n	80010aa <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001068:	4b0a      	ldr	r3, [pc, #40]	@ (8001094 <HAL_RCC_OscConfig+0x27c>)
 800106a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800106e:	4a09      	ldr	r2, [pc, #36]	@ (8001094 <HAL_RCC_OscConfig+0x27c>)
 8001070:	f023 0301 	bic.w	r3, r3, #1
 8001074:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001078:	f7ff fb6e 	bl	8000758 <HAL_GetTick>
 800107c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800107e:	e00d      	b.n	800109c <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001080:	f7ff fb6a 	bl	8000758 <HAL_GetTick>
 8001084:	4602      	mov	r2, r0
 8001086:	693b      	ldr	r3, [r7, #16]
 8001088:	1ad3      	subs	r3, r2, r3
 800108a:	2b02      	cmp	r3, #2
 800108c:	d906      	bls.n	800109c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800108e:	2303      	movs	r3, #3
 8001090:	e1d2      	b.n	8001438 <HAL_RCC_OscConfig+0x620>
 8001092:	bf00      	nop
 8001094:	40021000 	.word	0x40021000
 8001098:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800109c:	4b8c      	ldr	r3, [pc, #560]	@ (80012d0 <HAL_RCC_OscConfig+0x4b8>)
 800109e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80010a2:	f003 0302 	and.w	r3, r3, #2
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d1ea      	bne.n	8001080 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	f003 0304 	and.w	r3, r3, #4
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	f000 80a6 	beq.w	8001204 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80010b8:	2300      	movs	r3, #0
 80010ba:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80010bc:	4b84      	ldr	r3, [pc, #528]	@ (80012d0 <HAL_RCC_OscConfig+0x4b8>)
 80010be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80010c0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d101      	bne.n	80010cc <HAL_RCC_OscConfig+0x2b4>
 80010c8:	2301      	movs	r3, #1
 80010ca:	e000      	b.n	80010ce <HAL_RCC_OscConfig+0x2b6>
 80010cc:	2300      	movs	r3, #0
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d00d      	beq.n	80010ee <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80010d2:	4b7f      	ldr	r3, [pc, #508]	@ (80012d0 <HAL_RCC_OscConfig+0x4b8>)
 80010d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80010d6:	4a7e      	ldr	r2, [pc, #504]	@ (80012d0 <HAL_RCC_OscConfig+0x4b8>)
 80010d8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80010dc:	6593      	str	r3, [r2, #88]	@ 0x58
 80010de:	4b7c      	ldr	r3, [pc, #496]	@ (80012d0 <HAL_RCC_OscConfig+0x4b8>)
 80010e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80010e2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80010e6:	60fb      	str	r3, [r7, #12]
 80010e8:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80010ea:	2301      	movs	r3, #1
 80010ec:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80010ee:	4b79      	ldr	r3, [pc, #484]	@ (80012d4 <HAL_RCC_OscConfig+0x4bc>)
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d118      	bne.n	800112c <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80010fa:	4b76      	ldr	r3, [pc, #472]	@ (80012d4 <HAL_RCC_OscConfig+0x4bc>)
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	4a75      	ldr	r2, [pc, #468]	@ (80012d4 <HAL_RCC_OscConfig+0x4bc>)
 8001100:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001104:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001106:	f7ff fb27 	bl	8000758 <HAL_GetTick>
 800110a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800110c:	e008      	b.n	8001120 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800110e:	f7ff fb23 	bl	8000758 <HAL_GetTick>
 8001112:	4602      	mov	r2, r0
 8001114:	693b      	ldr	r3, [r7, #16]
 8001116:	1ad3      	subs	r3, r2, r3
 8001118:	2b02      	cmp	r3, #2
 800111a:	d901      	bls.n	8001120 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 800111c:	2303      	movs	r3, #3
 800111e:	e18b      	b.n	8001438 <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001120:	4b6c      	ldr	r3, [pc, #432]	@ (80012d4 <HAL_RCC_OscConfig+0x4bc>)
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001128:	2b00      	cmp	r3, #0
 800112a:	d0f0      	beq.n	800110e <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	689b      	ldr	r3, [r3, #8]
 8001130:	2b01      	cmp	r3, #1
 8001132:	d108      	bne.n	8001146 <HAL_RCC_OscConfig+0x32e>
 8001134:	4b66      	ldr	r3, [pc, #408]	@ (80012d0 <HAL_RCC_OscConfig+0x4b8>)
 8001136:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800113a:	4a65      	ldr	r2, [pc, #404]	@ (80012d0 <HAL_RCC_OscConfig+0x4b8>)
 800113c:	f043 0301 	orr.w	r3, r3, #1
 8001140:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001144:	e024      	b.n	8001190 <HAL_RCC_OscConfig+0x378>
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	689b      	ldr	r3, [r3, #8]
 800114a:	2b05      	cmp	r3, #5
 800114c:	d110      	bne.n	8001170 <HAL_RCC_OscConfig+0x358>
 800114e:	4b60      	ldr	r3, [pc, #384]	@ (80012d0 <HAL_RCC_OscConfig+0x4b8>)
 8001150:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001154:	4a5e      	ldr	r2, [pc, #376]	@ (80012d0 <HAL_RCC_OscConfig+0x4b8>)
 8001156:	f043 0304 	orr.w	r3, r3, #4
 800115a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800115e:	4b5c      	ldr	r3, [pc, #368]	@ (80012d0 <HAL_RCC_OscConfig+0x4b8>)
 8001160:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001164:	4a5a      	ldr	r2, [pc, #360]	@ (80012d0 <HAL_RCC_OscConfig+0x4b8>)
 8001166:	f043 0301 	orr.w	r3, r3, #1
 800116a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800116e:	e00f      	b.n	8001190 <HAL_RCC_OscConfig+0x378>
 8001170:	4b57      	ldr	r3, [pc, #348]	@ (80012d0 <HAL_RCC_OscConfig+0x4b8>)
 8001172:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001176:	4a56      	ldr	r2, [pc, #344]	@ (80012d0 <HAL_RCC_OscConfig+0x4b8>)
 8001178:	f023 0301 	bic.w	r3, r3, #1
 800117c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001180:	4b53      	ldr	r3, [pc, #332]	@ (80012d0 <HAL_RCC_OscConfig+0x4b8>)
 8001182:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001186:	4a52      	ldr	r2, [pc, #328]	@ (80012d0 <HAL_RCC_OscConfig+0x4b8>)
 8001188:	f023 0304 	bic.w	r3, r3, #4
 800118c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	689b      	ldr	r3, [r3, #8]
 8001194:	2b00      	cmp	r3, #0
 8001196:	d016      	beq.n	80011c6 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001198:	f7ff fade 	bl	8000758 <HAL_GetTick>
 800119c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800119e:	e00a      	b.n	80011b6 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80011a0:	f7ff fada 	bl	8000758 <HAL_GetTick>
 80011a4:	4602      	mov	r2, r0
 80011a6:	693b      	ldr	r3, [r7, #16]
 80011a8:	1ad3      	subs	r3, r2, r3
 80011aa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80011ae:	4293      	cmp	r3, r2
 80011b0:	d901      	bls.n	80011b6 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80011b2:	2303      	movs	r3, #3
 80011b4:	e140      	b.n	8001438 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80011b6:	4b46      	ldr	r3, [pc, #280]	@ (80012d0 <HAL_RCC_OscConfig+0x4b8>)
 80011b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80011bc:	f003 0302 	and.w	r3, r3, #2
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d0ed      	beq.n	80011a0 <HAL_RCC_OscConfig+0x388>
 80011c4:	e015      	b.n	80011f2 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80011c6:	f7ff fac7 	bl	8000758 <HAL_GetTick>
 80011ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80011cc:	e00a      	b.n	80011e4 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80011ce:	f7ff fac3 	bl	8000758 <HAL_GetTick>
 80011d2:	4602      	mov	r2, r0
 80011d4:	693b      	ldr	r3, [r7, #16]
 80011d6:	1ad3      	subs	r3, r2, r3
 80011d8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80011dc:	4293      	cmp	r3, r2
 80011de:	d901      	bls.n	80011e4 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80011e0:	2303      	movs	r3, #3
 80011e2:	e129      	b.n	8001438 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80011e4:	4b3a      	ldr	r3, [pc, #232]	@ (80012d0 <HAL_RCC_OscConfig+0x4b8>)
 80011e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80011ea:	f003 0302 	and.w	r3, r3, #2
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d1ed      	bne.n	80011ce <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80011f2:	7ffb      	ldrb	r3, [r7, #31]
 80011f4:	2b01      	cmp	r3, #1
 80011f6:	d105      	bne.n	8001204 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80011f8:	4b35      	ldr	r3, [pc, #212]	@ (80012d0 <HAL_RCC_OscConfig+0x4b8>)
 80011fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80011fc:	4a34      	ldr	r2, [pc, #208]	@ (80012d0 <HAL_RCC_OscConfig+0x4b8>)
 80011fe:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001202:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	f003 0320 	and.w	r3, r3, #32
 800120c:	2b00      	cmp	r3, #0
 800120e:	d03c      	beq.n	800128a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	699b      	ldr	r3, [r3, #24]
 8001214:	2b00      	cmp	r3, #0
 8001216:	d01c      	beq.n	8001252 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001218:	4b2d      	ldr	r3, [pc, #180]	@ (80012d0 <HAL_RCC_OscConfig+0x4b8>)
 800121a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800121e:	4a2c      	ldr	r2, [pc, #176]	@ (80012d0 <HAL_RCC_OscConfig+0x4b8>)
 8001220:	f043 0301 	orr.w	r3, r3, #1
 8001224:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001228:	f7ff fa96 	bl	8000758 <HAL_GetTick>
 800122c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800122e:	e008      	b.n	8001242 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001230:	f7ff fa92 	bl	8000758 <HAL_GetTick>
 8001234:	4602      	mov	r2, r0
 8001236:	693b      	ldr	r3, [r7, #16]
 8001238:	1ad3      	subs	r3, r2, r3
 800123a:	2b02      	cmp	r3, #2
 800123c:	d901      	bls.n	8001242 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800123e:	2303      	movs	r3, #3
 8001240:	e0fa      	b.n	8001438 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001242:	4b23      	ldr	r3, [pc, #140]	@ (80012d0 <HAL_RCC_OscConfig+0x4b8>)
 8001244:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001248:	f003 0302 	and.w	r3, r3, #2
 800124c:	2b00      	cmp	r3, #0
 800124e:	d0ef      	beq.n	8001230 <HAL_RCC_OscConfig+0x418>
 8001250:	e01b      	b.n	800128a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001252:	4b1f      	ldr	r3, [pc, #124]	@ (80012d0 <HAL_RCC_OscConfig+0x4b8>)
 8001254:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001258:	4a1d      	ldr	r2, [pc, #116]	@ (80012d0 <HAL_RCC_OscConfig+0x4b8>)
 800125a:	f023 0301 	bic.w	r3, r3, #1
 800125e:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001262:	f7ff fa79 	bl	8000758 <HAL_GetTick>
 8001266:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001268:	e008      	b.n	800127c <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800126a:	f7ff fa75 	bl	8000758 <HAL_GetTick>
 800126e:	4602      	mov	r2, r0
 8001270:	693b      	ldr	r3, [r7, #16]
 8001272:	1ad3      	subs	r3, r2, r3
 8001274:	2b02      	cmp	r3, #2
 8001276:	d901      	bls.n	800127c <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8001278:	2303      	movs	r3, #3
 800127a:	e0dd      	b.n	8001438 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800127c:	4b14      	ldr	r3, [pc, #80]	@ (80012d0 <HAL_RCC_OscConfig+0x4b8>)
 800127e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001282:	f003 0302 	and.w	r3, r3, #2
 8001286:	2b00      	cmp	r3, #0
 8001288:	d1ef      	bne.n	800126a <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	69db      	ldr	r3, [r3, #28]
 800128e:	2b00      	cmp	r3, #0
 8001290:	f000 80d1 	beq.w	8001436 <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001294:	4b0e      	ldr	r3, [pc, #56]	@ (80012d0 <HAL_RCC_OscConfig+0x4b8>)
 8001296:	689b      	ldr	r3, [r3, #8]
 8001298:	f003 030c 	and.w	r3, r3, #12
 800129c:	2b0c      	cmp	r3, #12
 800129e:	f000 808b 	beq.w	80013b8 <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	69db      	ldr	r3, [r3, #28]
 80012a6:	2b02      	cmp	r3, #2
 80012a8:	d15e      	bne.n	8001368 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80012aa:	4b09      	ldr	r3, [pc, #36]	@ (80012d0 <HAL_RCC_OscConfig+0x4b8>)
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	4a08      	ldr	r2, [pc, #32]	@ (80012d0 <HAL_RCC_OscConfig+0x4b8>)
 80012b0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80012b4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012b6:	f7ff fa4f 	bl	8000758 <HAL_GetTick>
 80012ba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80012bc:	e00c      	b.n	80012d8 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80012be:	f7ff fa4b 	bl	8000758 <HAL_GetTick>
 80012c2:	4602      	mov	r2, r0
 80012c4:	693b      	ldr	r3, [r7, #16]
 80012c6:	1ad3      	subs	r3, r2, r3
 80012c8:	2b02      	cmp	r3, #2
 80012ca:	d905      	bls.n	80012d8 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80012cc:	2303      	movs	r3, #3
 80012ce:	e0b3      	b.n	8001438 <HAL_RCC_OscConfig+0x620>
 80012d0:	40021000 	.word	0x40021000
 80012d4:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80012d8:	4b59      	ldr	r3, [pc, #356]	@ (8001440 <HAL_RCC_OscConfig+0x628>)
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d1ec      	bne.n	80012be <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80012e4:	4b56      	ldr	r3, [pc, #344]	@ (8001440 <HAL_RCC_OscConfig+0x628>)
 80012e6:	68da      	ldr	r2, [r3, #12]
 80012e8:	4b56      	ldr	r3, [pc, #344]	@ (8001444 <HAL_RCC_OscConfig+0x62c>)
 80012ea:	4013      	ands	r3, r2
 80012ec:	687a      	ldr	r2, [r7, #4]
 80012ee:	6a11      	ldr	r1, [r2, #32]
 80012f0:	687a      	ldr	r2, [r7, #4]
 80012f2:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80012f4:	3a01      	subs	r2, #1
 80012f6:	0112      	lsls	r2, r2, #4
 80012f8:	4311      	orrs	r1, r2
 80012fa:	687a      	ldr	r2, [r7, #4]
 80012fc:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 80012fe:	0212      	lsls	r2, r2, #8
 8001300:	4311      	orrs	r1, r2
 8001302:	687a      	ldr	r2, [r7, #4]
 8001304:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8001306:	0852      	lsrs	r2, r2, #1
 8001308:	3a01      	subs	r2, #1
 800130a:	0552      	lsls	r2, r2, #21
 800130c:	4311      	orrs	r1, r2
 800130e:	687a      	ldr	r2, [r7, #4]
 8001310:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8001312:	0852      	lsrs	r2, r2, #1
 8001314:	3a01      	subs	r2, #1
 8001316:	0652      	lsls	r2, r2, #25
 8001318:	4311      	orrs	r1, r2
 800131a:	687a      	ldr	r2, [r7, #4]
 800131c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800131e:	06d2      	lsls	r2, r2, #27
 8001320:	430a      	orrs	r2, r1
 8001322:	4947      	ldr	r1, [pc, #284]	@ (8001440 <HAL_RCC_OscConfig+0x628>)
 8001324:	4313      	orrs	r3, r2
 8001326:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001328:	4b45      	ldr	r3, [pc, #276]	@ (8001440 <HAL_RCC_OscConfig+0x628>)
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	4a44      	ldr	r2, [pc, #272]	@ (8001440 <HAL_RCC_OscConfig+0x628>)
 800132e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001332:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001334:	4b42      	ldr	r3, [pc, #264]	@ (8001440 <HAL_RCC_OscConfig+0x628>)
 8001336:	68db      	ldr	r3, [r3, #12]
 8001338:	4a41      	ldr	r2, [pc, #260]	@ (8001440 <HAL_RCC_OscConfig+0x628>)
 800133a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800133e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001340:	f7ff fa0a 	bl	8000758 <HAL_GetTick>
 8001344:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001346:	e008      	b.n	800135a <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001348:	f7ff fa06 	bl	8000758 <HAL_GetTick>
 800134c:	4602      	mov	r2, r0
 800134e:	693b      	ldr	r3, [r7, #16]
 8001350:	1ad3      	subs	r3, r2, r3
 8001352:	2b02      	cmp	r3, #2
 8001354:	d901      	bls.n	800135a <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8001356:	2303      	movs	r3, #3
 8001358:	e06e      	b.n	8001438 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800135a:	4b39      	ldr	r3, [pc, #228]	@ (8001440 <HAL_RCC_OscConfig+0x628>)
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001362:	2b00      	cmp	r3, #0
 8001364:	d0f0      	beq.n	8001348 <HAL_RCC_OscConfig+0x530>
 8001366:	e066      	b.n	8001436 <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001368:	4b35      	ldr	r3, [pc, #212]	@ (8001440 <HAL_RCC_OscConfig+0x628>)
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	4a34      	ldr	r2, [pc, #208]	@ (8001440 <HAL_RCC_OscConfig+0x628>)
 800136e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001372:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8001374:	4b32      	ldr	r3, [pc, #200]	@ (8001440 <HAL_RCC_OscConfig+0x628>)
 8001376:	68db      	ldr	r3, [r3, #12]
 8001378:	4a31      	ldr	r2, [pc, #196]	@ (8001440 <HAL_RCC_OscConfig+0x628>)
 800137a:	f023 0303 	bic.w	r3, r3, #3
 800137e:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8001380:	4b2f      	ldr	r3, [pc, #188]	@ (8001440 <HAL_RCC_OscConfig+0x628>)
 8001382:	68db      	ldr	r3, [r3, #12]
 8001384:	4a2e      	ldr	r2, [pc, #184]	@ (8001440 <HAL_RCC_OscConfig+0x628>)
 8001386:	f023 7388 	bic.w	r3, r3, #17825792	@ 0x1100000
 800138a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800138e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001390:	f7ff f9e2 	bl	8000758 <HAL_GetTick>
 8001394:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001396:	e008      	b.n	80013aa <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001398:	f7ff f9de 	bl	8000758 <HAL_GetTick>
 800139c:	4602      	mov	r2, r0
 800139e:	693b      	ldr	r3, [r7, #16]
 80013a0:	1ad3      	subs	r3, r2, r3
 80013a2:	2b02      	cmp	r3, #2
 80013a4:	d901      	bls.n	80013aa <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 80013a6:	2303      	movs	r3, #3
 80013a8:	e046      	b.n	8001438 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80013aa:	4b25      	ldr	r3, [pc, #148]	@ (8001440 <HAL_RCC_OscConfig+0x628>)
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d1f0      	bne.n	8001398 <HAL_RCC_OscConfig+0x580>
 80013b6:	e03e      	b.n	8001436 <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	69db      	ldr	r3, [r3, #28]
 80013bc:	2b01      	cmp	r3, #1
 80013be:	d101      	bne.n	80013c4 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 80013c0:	2301      	movs	r3, #1
 80013c2:	e039      	b.n	8001438 <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80013c4:	4b1e      	ldr	r3, [pc, #120]	@ (8001440 <HAL_RCC_OscConfig+0x628>)
 80013c6:	68db      	ldr	r3, [r3, #12]
 80013c8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80013ca:	697b      	ldr	r3, [r7, #20]
 80013cc:	f003 0203 	and.w	r2, r3, #3
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	6a1b      	ldr	r3, [r3, #32]
 80013d4:	429a      	cmp	r2, r3
 80013d6:	d12c      	bne.n	8001432 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80013d8:	697b      	ldr	r3, [r7, #20]
 80013da:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80013e2:	3b01      	subs	r3, #1
 80013e4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80013e6:	429a      	cmp	r2, r3
 80013e8:	d123      	bne.n	8001432 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80013ea:	697b      	ldr	r3, [r7, #20]
 80013ec:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80013f4:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80013f6:	429a      	cmp	r2, r3
 80013f8:	d11b      	bne.n	8001432 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80013fa:	697b      	ldr	r3, [r7, #20]
 80013fc:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001404:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001406:	429a      	cmp	r2, r3
 8001408:	d113      	bne.n	8001432 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800140a:	697b      	ldr	r3, [r7, #20]
 800140c:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001414:	085b      	lsrs	r3, r3, #1
 8001416:	3b01      	subs	r3, #1
 8001418:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800141a:	429a      	cmp	r2, r3
 800141c:	d109      	bne.n	8001432 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800141e:	697b      	ldr	r3, [r7, #20]
 8001420:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001428:	085b      	lsrs	r3, r3, #1
 800142a:	3b01      	subs	r3, #1
 800142c:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800142e:	429a      	cmp	r2, r3
 8001430:	d001      	beq.n	8001436 <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 8001432:	2301      	movs	r3, #1
 8001434:	e000      	b.n	8001438 <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 8001436:	2300      	movs	r3, #0
}
 8001438:	4618      	mov	r0, r3
 800143a:	3720      	adds	r7, #32
 800143c:	46bd      	mov	sp, r7
 800143e:	bd80      	pop	{r7, pc}
 8001440:	40021000 	.word	0x40021000
 8001444:	019f800c 	.word	0x019f800c

08001448 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	b086      	sub	sp, #24
 800144c:	af00      	add	r7, sp, #0
 800144e:	6078      	str	r0, [r7, #4]
 8001450:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8001452:	2300      	movs	r3, #0
 8001454:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	2b00      	cmp	r3, #0
 800145a:	d101      	bne.n	8001460 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800145c:	2301      	movs	r3, #1
 800145e:	e11e      	b.n	800169e <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001460:	4b91      	ldr	r3, [pc, #580]	@ (80016a8 <HAL_RCC_ClockConfig+0x260>)
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	f003 030f 	and.w	r3, r3, #15
 8001468:	683a      	ldr	r2, [r7, #0]
 800146a:	429a      	cmp	r2, r3
 800146c:	d910      	bls.n	8001490 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800146e:	4b8e      	ldr	r3, [pc, #568]	@ (80016a8 <HAL_RCC_ClockConfig+0x260>)
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	f023 020f 	bic.w	r2, r3, #15
 8001476:	498c      	ldr	r1, [pc, #560]	@ (80016a8 <HAL_RCC_ClockConfig+0x260>)
 8001478:	683b      	ldr	r3, [r7, #0]
 800147a:	4313      	orrs	r3, r2
 800147c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800147e:	4b8a      	ldr	r3, [pc, #552]	@ (80016a8 <HAL_RCC_ClockConfig+0x260>)
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	f003 030f 	and.w	r3, r3, #15
 8001486:	683a      	ldr	r2, [r7, #0]
 8001488:	429a      	cmp	r2, r3
 800148a:	d001      	beq.n	8001490 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800148c:	2301      	movs	r3, #1
 800148e:	e106      	b.n	800169e <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	f003 0301 	and.w	r3, r3, #1
 8001498:	2b00      	cmp	r3, #0
 800149a:	d073      	beq.n	8001584 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	685b      	ldr	r3, [r3, #4]
 80014a0:	2b03      	cmp	r3, #3
 80014a2:	d129      	bne.n	80014f8 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80014a4:	4b81      	ldr	r3, [pc, #516]	@ (80016ac <HAL_RCC_ClockConfig+0x264>)
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d101      	bne.n	80014b4 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80014b0:	2301      	movs	r3, #1
 80014b2:	e0f4      	b.n	800169e <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80014b4:	f000 f966 	bl	8001784 <RCC_GetSysClockFreqFromPLLSource>
 80014b8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80014ba:	693b      	ldr	r3, [r7, #16]
 80014bc:	4a7c      	ldr	r2, [pc, #496]	@ (80016b0 <HAL_RCC_ClockConfig+0x268>)
 80014be:	4293      	cmp	r3, r2
 80014c0:	d93f      	bls.n	8001542 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80014c2:	4b7a      	ldr	r3, [pc, #488]	@ (80016ac <HAL_RCC_ClockConfig+0x264>)
 80014c4:	689b      	ldr	r3, [r3, #8]
 80014c6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d009      	beq.n	80014e2 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d033      	beq.n	8001542 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d12f      	bne.n	8001542 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80014e2:	4b72      	ldr	r3, [pc, #456]	@ (80016ac <HAL_RCC_ClockConfig+0x264>)
 80014e4:	689b      	ldr	r3, [r3, #8]
 80014e6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80014ea:	4a70      	ldr	r2, [pc, #448]	@ (80016ac <HAL_RCC_ClockConfig+0x264>)
 80014ec:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80014f0:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80014f2:	2380      	movs	r3, #128	@ 0x80
 80014f4:	617b      	str	r3, [r7, #20]
 80014f6:	e024      	b.n	8001542 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	685b      	ldr	r3, [r3, #4]
 80014fc:	2b02      	cmp	r3, #2
 80014fe:	d107      	bne.n	8001510 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001500:	4b6a      	ldr	r3, [pc, #424]	@ (80016ac <HAL_RCC_ClockConfig+0x264>)
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001508:	2b00      	cmp	r3, #0
 800150a:	d109      	bne.n	8001520 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800150c:	2301      	movs	r3, #1
 800150e:	e0c6      	b.n	800169e <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001510:	4b66      	ldr	r3, [pc, #408]	@ (80016ac <HAL_RCC_ClockConfig+0x264>)
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001518:	2b00      	cmp	r3, #0
 800151a:	d101      	bne.n	8001520 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800151c:	2301      	movs	r3, #1
 800151e:	e0be      	b.n	800169e <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8001520:	f000 f8ce 	bl	80016c0 <HAL_RCC_GetSysClockFreq>
 8001524:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8001526:	693b      	ldr	r3, [r7, #16]
 8001528:	4a61      	ldr	r2, [pc, #388]	@ (80016b0 <HAL_RCC_ClockConfig+0x268>)
 800152a:	4293      	cmp	r3, r2
 800152c:	d909      	bls.n	8001542 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800152e:	4b5f      	ldr	r3, [pc, #380]	@ (80016ac <HAL_RCC_ClockConfig+0x264>)
 8001530:	689b      	ldr	r3, [r3, #8]
 8001532:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001536:	4a5d      	ldr	r2, [pc, #372]	@ (80016ac <HAL_RCC_ClockConfig+0x264>)
 8001538:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800153c:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800153e:	2380      	movs	r3, #128	@ 0x80
 8001540:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001542:	4b5a      	ldr	r3, [pc, #360]	@ (80016ac <HAL_RCC_ClockConfig+0x264>)
 8001544:	689b      	ldr	r3, [r3, #8]
 8001546:	f023 0203 	bic.w	r2, r3, #3
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	685b      	ldr	r3, [r3, #4]
 800154e:	4957      	ldr	r1, [pc, #348]	@ (80016ac <HAL_RCC_ClockConfig+0x264>)
 8001550:	4313      	orrs	r3, r2
 8001552:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001554:	f7ff f900 	bl	8000758 <HAL_GetTick>
 8001558:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800155a:	e00a      	b.n	8001572 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800155c:	f7ff f8fc 	bl	8000758 <HAL_GetTick>
 8001560:	4602      	mov	r2, r0
 8001562:	68fb      	ldr	r3, [r7, #12]
 8001564:	1ad3      	subs	r3, r2, r3
 8001566:	f241 3288 	movw	r2, #5000	@ 0x1388
 800156a:	4293      	cmp	r3, r2
 800156c:	d901      	bls.n	8001572 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800156e:	2303      	movs	r3, #3
 8001570:	e095      	b.n	800169e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001572:	4b4e      	ldr	r3, [pc, #312]	@ (80016ac <HAL_RCC_ClockConfig+0x264>)
 8001574:	689b      	ldr	r3, [r3, #8]
 8001576:	f003 020c 	and.w	r2, r3, #12
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	685b      	ldr	r3, [r3, #4]
 800157e:	009b      	lsls	r3, r3, #2
 8001580:	429a      	cmp	r2, r3
 8001582:	d1eb      	bne.n	800155c <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	f003 0302 	and.w	r3, r3, #2
 800158c:	2b00      	cmp	r3, #0
 800158e:	d023      	beq.n	80015d8 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	f003 0304 	and.w	r3, r3, #4
 8001598:	2b00      	cmp	r3, #0
 800159a:	d005      	beq.n	80015a8 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800159c:	4b43      	ldr	r3, [pc, #268]	@ (80016ac <HAL_RCC_ClockConfig+0x264>)
 800159e:	689b      	ldr	r3, [r3, #8]
 80015a0:	4a42      	ldr	r2, [pc, #264]	@ (80016ac <HAL_RCC_ClockConfig+0x264>)
 80015a2:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80015a6:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	f003 0308 	and.w	r3, r3, #8
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d007      	beq.n	80015c4 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80015b4:	4b3d      	ldr	r3, [pc, #244]	@ (80016ac <HAL_RCC_ClockConfig+0x264>)
 80015b6:	689b      	ldr	r3, [r3, #8]
 80015b8:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80015bc:	4a3b      	ldr	r2, [pc, #236]	@ (80016ac <HAL_RCC_ClockConfig+0x264>)
 80015be:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80015c2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80015c4:	4b39      	ldr	r3, [pc, #228]	@ (80016ac <HAL_RCC_ClockConfig+0x264>)
 80015c6:	689b      	ldr	r3, [r3, #8]
 80015c8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	689b      	ldr	r3, [r3, #8]
 80015d0:	4936      	ldr	r1, [pc, #216]	@ (80016ac <HAL_RCC_ClockConfig+0x264>)
 80015d2:	4313      	orrs	r3, r2
 80015d4:	608b      	str	r3, [r1, #8]
 80015d6:	e008      	b.n	80015ea <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80015d8:	697b      	ldr	r3, [r7, #20]
 80015da:	2b80      	cmp	r3, #128	@ 0x80
 80015dc:	d105      	bne.n	80015ea <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80015de:	4b33      	ldr	r3, [pc, #204]	@ (80016ac <HAL_RCC_ClockConfig+0x264>)
 80015e0:	689b      	ldr	r3, [r3, #8]
 80015e2:	4a32      	ldr	r2, [pc, #200]	@ (80016ac <HAL_RCC_ClockConfig+0x264>)
 80015e4:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80015e8:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80015ea:	4b2f      	ldr	r3, [pc, #188]	@ (80016a8 <HAL_RCC_ClockConfig+0x260>)
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	f003 030f 	and.w	r3, r3, #15
 80015f2:	683a      	ldr	r2, [r7, #0]
 80015f4:	429a      	cmp	r2, r3
 80015f6:	d21d      	bcs.n	8001634 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80015f8:	4b2b      	ldr	r3, [pc, #172]	@ (80016a8 <HAL_RCC_ClockConfig+0x260>)
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	f023 020f 	bic.w	r2, r3, #15
 8001600:	4929      	ldr	r1, [pc, #164]	@ (80016a8 <HAL_RCC_ClockConfig+0x260>)
 8001602:	683b      	ldr	r3, [r7, #0]
 8001604:	4313      	orrs	r3, r2
 8001606:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001608:	f7ff f8a6 	bl	8000758 <HAL_GetTick>
 800160c:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800160e:	e00a      	b.n	8001626 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001610:	f7ff f8a2 	bl	8000758 <HAL_GetTick>
 8001614:	4602      	mov	r2, r0
 8001616:	68fb      	ldr	r3, [r7, #12]
 8001618:	1ad3      	subs	r3, r2, r3
 800161a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800161e:	4293      	cmp	r3, r2
 8001620:	d901      	bls.n	8001626 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8001622:	2303      	movs	r3, #3
 8001624:	e03b      	b.n	800169e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001626:	4b20      	ldr	r3, [pc, #128]	@ (80016a8 <HAL_RCC_ClockConfig+0x260>)
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	f003 030f 	and.w	r3, r3, #15
 800162e:	683a      	ldr	r2, [r7, #0]
 8001630:	429a      	cmp	r2, r3
 8001632:	d1ed      	bne.n	8001610 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	f003 0304 	and.w	r3, r3, #4
 800163c:	2b00      	cmp	r3, #0
 800163e:	d008      	beq.n	8001652 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001640:	4b1a      	ldr	r3, [pc, #104]	@ (80016ac <HAL_RCC_ClockConfig+0x264>)
 8001642:	689b      	ldr	r3, [r3, #8]
 8001644:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	68db      	ldr	r3, [r3, #12]
 800164c:	4917      	ldr	r1, [pc, #92]	@ (80016ac <HAL_RCC_ClockConfig+0x264>)
 800164e:	4313      	orrs	r3, r2
 8001650:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	f003 0308 	and.w	r3, r3, #8
 800165a:	2b00      	cmp	r3, #0
 800165c:	d009      	beq.n	8001672 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800165e:	4b13      	ldr	r3, [pc, #76]	@ (80016ac <HAL_RCC_ClockConfig+0x264>)
 8001660:	689b      	ldr	r3, [r3, #8]
 8001662:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	691b      	ldr	r3, [r3, #16]
 800166a:	00db      	lsls	r3, r3, #3
 800166c:	490f      	ldr	r1, [pc, #60]	@ (80016ac <HAL_RCC_ClockConfig+0x264>)
 800166e:	4313      	orrs	r3, r2
 8001670:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001672:	f000 f825 	bl	80016c0 <HAL_RCC_GetSysClockFreq>
 8001676:	4602      	mov	r2, r0
 8001678:	4b0c      	ldr	r3, [pc, #48]	@ (80016ac <HAL_RCC_ClockConfig+0x264>)
 800167a:	689b      	ldr	r3, [r3, #8]
 800167c:	091b      	lsrs	r3, r3, #4
 800167e:	f003 030f 	and.w	r3, r3, #15
 8001682:	490c      	ldr	r1, [pc, #48]	@ (80016b4 <HAL_RCC_ClockConfig+0x26c>)
 8001684:	5ccb      	ldrb	r3, [r1, r3]
 8001686:	f003 031f 	and.w	r3, r3, #31
 800168a:	fa22 f303 	lsr.w	r3, r2, r3
 800168e:	4a0a      	ldr	r2, [pc, #40]	@ (80016b8 <HAL_RCC_ClockConfig+0x270>)
 8001690:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001692:	4b0a      	ldr	r3, [pc, #40]	@ (80016bc <HAL_RCC_ClockConfig+0x274>)
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	4618      	mov	r0, r3
 8001698:	f7ff f812 	bl	80006c0 <HAL_InitTick>
 800169c:	4603      	mov	r3, r0
}
 800169e:	4618      	mov	r0, r3
 80016a0:	3718      	adds	r7, #24
 80016a2:	46bd      	mov	sp, r7
 80016a4:	bd80      	pop	{r7, pc}
 80016a6:	bf00      	nop
 80016a8:	40022000 	.word	0x40022000
 80016ac:	40021000 	.word	0x40021000
 80016b0:	04c4b400 	.word	0x04c4b400
 80016b4:	080020c4 	.word	0x080020c4
 80016b8:	20000000 	.word	0x20000000
 80016bc:	20000004 	.word	0x20000004

080016c0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80016c0:	b480      	push	{r7}
 80016c2:	b087      	sub	sp, #28
 80016c4:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80016c6:	4b2c      	ldr	r3, [pc, #176]	@ (8001778 <HAL_RCC_GetSysClockFreq+0xb8>)
 80016c8:	689b      	ldr	r3, [r3, #8]
 80016ca:	f003 030c 	and.w	r3, r3, #12
 80016ce:	2b04      	cmp	r3, #4
 80016d0:	d102      	bne.n	80016d8 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80016d2:	4b2a      	ldr	r3, [pc, #168]	@ (800177c <HAL_RCC_GetSysClockFreq+0xbc>)
 80016d4:	613b      	str	r3, [r7, #16]
 80016d6:	e047      	b.n	8001768 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80016d8:	4b27      	ldr	r3, [pc, #156]	@ (8001778 <HAL_RCC_GetSysClockFreq+0xb8>)
 80016da:	689b      	ldr	r3, [r3, #8]
 80016dc:	f003 030c 	and.w	r3, r3, #12
 80016e0:	2b08      	cmp	r3, #8
 80016e2:	d102      	bne.n	80016ea <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80016e4:	4b26      	ldr	r3, [pc, #152]	@ (8001780 <HAL_RCC_GetSysClockFreq+0xc0>)
 80016e6:	613b      	str	r3, [r7, #16]
 80016e8:	e03e      	b.n	8001768 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80016ea:	4b23      	ldr	r3, [pc, #140]	@ (8001778 <HAL_RCC_GetSysClockFreq+0xb8>)
 80016ec:	689b      	ldr	r3, [r3, #8]
 80016ee:	f003 030c 	and.w	r3, r3, #12
 80016f2:	2b0c      	cmp	r3, #12
 80016f4:	d136      	bne.n	8001764 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80016f6:	4b20      	ldr	r3, [pc, #128]	@ (8001778 <HAL_RCC_GetSysClockFreq+0xb8>)
 80016f8:	68db      	ldr	r3, [r3, #12]
 80016fa:	f003 0303 	and.w	r3, r3, #3
 80016fe:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001700:	4b1d      	ldr	r3, [pc, #116]	@ (8001778 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001702:	68db      	ldr	r3, [r3, #12]
 8001704:	091b      	lsrs	r3, r3, #4
 8001706:	f003 030f 	and.w	r3, r3, #15
 800170a:	3301      	adds	r3, #1
 800170c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800170e:	68fb      	ldr	r3, [r7, #12]
 8001710:	2b03      	cmp	r3, #3
 8001712:	d10c      	bne.n	800172e <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001714:	4a1a      	ldr	r2, [pc, #104]	@ (8001780 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001716:	68bb      	ldr	r3, [r7, #8]
 8001718:	fbb2 f3f3 	udiv	r3, r2, r3
 800171c:	4a16      	ldr	r2, [pc, #88]	@ (8001778 <HAL_RCC_GetSysClockFreq+0xb8>)
 800171e:	68d2      	ldr	r2, [r2, #12]
 8001720:	0a12      	lsrs	r2, r2, #8
 8001722:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8001726:	fb02 f303 	mul.w	r3, r2, r3
 800172a:	617b      	str	r3, [r7, #20]
      break;
 800172c:	e00c      	b.n	8001748 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800172e:	4a13      	ldr	r2, [pc, #76]	@ (800177c <HAL_RCC_GetSysClockFreq+0xbc>)
 8001730:	68bb      	ldr	r3, [r7, #8]
 8001732:	fbb2 f3f3 	udiv	r3, r2, r3
 8001736:	4a10      	ldr	r2, [pc, #64]	@ (8001778 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001738:	68d2      	ldr	r2, [r2, #12]
 800173a:	0a12      	lsrs	r2, r2, #8
 800173c:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8001740:	fb02 f303 	mul.w	r3, r2, r3
 8001744:	617b      	str	r3, [r7, #20]
      break;
 8001746:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001748:	4b0b      	ldr	r3, [pc, #44]	@ (8001778 <HAL_RCC_GetSysClockFreq+0xb8>)
 800174a:	68db      	ldr	r3, [r3, #12]
 800174c:	0e5b      	lsrs	r3, r3, #25
 800174e:	f003 0303 	and.w	r3, r3, #3
 8001752:	3301      	adds	r3, #1
 8001754:	005b      	lsls	r3, r3, #1
 8001756:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8001758:	697a      	ldr	r2, [r7, #20]
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001760:	613b      	str	r3, [r7, #16]
 8001762:	e001      	b.n	8001768 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8001764:	2300      	movs	r3, #0
 8001766:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8001768:	693b      	ldr	r3, [r7, #16]
}
 800176a:	4618      	mov	r0, r3
 800176c:	371c      	adds	r7, #28
 800176e:	46bd      	mov	sp, r7
 8001770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001774:	4770      	bx	lr
 8001776:	bf00      	nop
 8001778:	40021000 	.word	0x40021000
 800177c:	00f42400 	.word	0x00f42400
 8001780:	007a1200 	.word	0x007a1200

08001784 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8001784:	b480      	push	{r7}
 8001786:	b087      	sub	sp, #28
 8001788:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800178a:	4b1e      	ldr	r3, [pc, #120]	@ (8001804 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800178c:	68db      	ldr	r3, [r3, #12]
 800178e:	f003 0303 	and.w	r3, r3, #3
 8001792:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001794:	4b1b      	ldr	r3, [pc, #108]	@ (8001804 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001796:	68db      	ldr	r3, [r3, #12]
 8001798:	091b      	lsrs	r3, r3, #4
 800179a:	f003 030f 	and.w	r3, r3, #15
 800179e:	3301      	adds	r3, #1
 80017a0:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80017a2:	693b      	ldr	r3, [r7, #16]
 80017a4:	2b03      	cmp	r3, #3
 80017a6:	d10c      	bne.n	80017c2 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80017a8:	4a17      	ldr	r2, [pc, #92]	@ (8001808 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80017b0:	4a14      	ldr	r2, [pc, #80]	@ (8001804 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80017b2:	68d2      	ldr	r2, [r2, #12]
 80017b4:	0a12      	lsrs	r2, r2, #8
 80017b6:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80017ba:	fb02 f303 	mul.w	r3, r2, r3
 80017be:	617b      	str	r3, [r7, #20]
    break;
 80017c0:	e00c      	b.n	80017dc <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80017c2:	4a12      	ldr	r2, [pc, #72]	@ (800180c <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80017ca:	4a0e      	ldr	r2, [pc, #56]	@ (8001804 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80017cc:	68d2      	ldr	r2, [r2, #12]
 80017ce:	0a12      	lsrs	r2, r2, #8
 80017d0:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80017d4:	fb02 f303 	mul.w	r3, r2, r3
 80017d8:	617b      	str	r3, [r7, #20]
    break;
 80017da:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80017dc:	4b09      	ldr	r3, [pc, #36]	@ (8001804 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80017de:	68db      	ldr	r3, [r3, #12]
 80017e0:	0e5b      	lsrs	r3, r3, #25
 80017e2:	f003 0303 	and.w	r3, r3, #3
 80017e6:	3301      	adds	r3, #1
 80017e8:	005b      	lsls	r3, r3, #1
 80017ea:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80017ec:	697a      	ldr	r2, [r7, #20]
 80017ee:	68bb      	ldr	r3, [r7, #8]
 80017f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80017f4:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80017f6:	687b      	ldr	r3, [r7, #4]
}
 80017f8:	4618      	mov	r0, r3
 80017fa:	371c      	adds	r7, #28
 80017fc:	46bd      	mov	sp, r7
 80017fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001802:	4770      	bx	lr
 8001804:	40021000 	.word	0x40021000
 8001808:	007a1200 	.word	0x007a1200
 800180c:	00f42400 	.word	0x00f42400

08001810 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	b084      	sub	sp, #16
 8001814:	af00      	add	r7, sp, #0
 8001816:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	2b00      	cmp	r3, #0
 800181c:	d101      	bne.n	8001822 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800181e:	2301      	movs	r3, #1
 8001820:	e09d      	b.n	800195e <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001826:	2b00      	cmp	r3, #0
 8001828:	d108      	bne.n	800183c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	685b      	ldr	r3, [r3, #4]
 800182e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8001832:	d009      	beq.n	8001848 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	2200      	movs	r2, #0
 8001838:	61da      	str	r2, [r3, #28]
 800183a:	e005      	b.n	8001848 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	2200      	movs	r2, #0
 8001840:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	2200      	movs	r2, #0
 8001846:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	2200      	movs	r2, #0
 800184c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8001854:	b2db      	uxtb	r3, r3
 8001856:	2b00      	cmp	r3, #0
 8001858:	d106      	bne.n	8001868 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	2200      	movs	r2, #0
 800185e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001862:	6878      	ldr	r0, [r7, #4]
 8001864:	f7fe fe42 	bl	80004ec <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	2202      	movs	r2, #2
 800186c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	681a      	ldr	r2, [r3, #0]
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800187e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	68db      	ldr	r3, [r3, #12]
 8001884:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8001888:	d902      	bls.n	8001890 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800188a:	2300      	movs	r3, #0
 800188c:	60fb      	str	r3, [r7, #12]
 800188e:	e002      	b.n	8001896 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8001890:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001894:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	68db      	ldr	r3, [r3, #12]
 800189a:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 800189e:	d007      	beq.n	80018b0 <HAL_SPI_Init+0xa0>
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	68db      	ldr	r3, [r3, #12]
 80018a4:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80018a8:	d002      	beq.n	80018b0 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	2200      	movs	r2, #0
 80018ae:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	685b      	ldr	r3, [r3, #4]
 80018b4:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	689b      	ldr	r3, [r3, #8]
 80018bc:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80018c0:	431a      	orrs	r2, r3
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	691b      	ldr	r3, [r3, #16]
 80018c6:	f003 0302 	and.w	r3, r3, #2
 80018ca:	431a      	orrs	r2, r3
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	695b      	ldr	r3, [r3, #20]
 80018d0:	f003 0301 	and.w	r3, r3, #1
 80018d4:	431a      	orrs	r2, r3
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	699b      	ldr	r3, [r3, #24]
 80018da:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80018de:	431a      	orrs	r2, r3
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	69db      	ldr	r3, [r3, #28]
 80018e4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80018e8:	431a      	orrs	r2, r3
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	6a1b      	ldr	r3, [r3, #32]
 80018ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80018f2:	ea42 0103 	orr.w	r1, r2, r3
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80018fa:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	430a      	orrs	r2, r1
 8001904:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	699b      	ldr	r3, [r3, #24]
 800190a:	0c1b      	lsrs	r3, r3, #16
 800190c:	f003 0204 	and.w	r2, r3, #4
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001914:	f003 0310 	and.w	r3, r3, #16
 8001918:	431a      	orrs	r2, r3
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800191e:	f003 0308 	and.w	r3, r3, #8
 8001922:	431a      	orrs	r2, r3
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	68db      	ldr	r3, [r3, #12]
 8001928:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 800192c:	ea42 0103 	orr.w	r1, r2, r3
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	430a      	orrs	r2, r1
 800193c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	69da      	ldr	r2, [r3, #28]
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800194c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	2200      	movs	r2, #0
 8001952:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	2201      	movs	r2, #1
 8001958:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 800195c:	2300      	movs	r3, #0
}
 800195e:	4618      	mov	r0, r3
 8001960:	3710      	adds	r7, #16
 8001962:	46bd      	mov	sp, r7
 8001964:	bd80      	pop	{r7, pc}

08001966 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8001966:	b580      	push	{r7, lr}
 8001968:	b08a      	sub	sp, #40	@ 0x28
 800196a:	af00      	add	r7, sp, #0
 800196c:	60f8      	str	r0, [r7, #12]
 800196e:	60b9      	str	r1, [r7, #8]
 8001970:	607a      	str	r2, [r7, #4]
 8001972:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8001974:	2301      	movs	r3, #1
 8001976:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8001978:	2300      	movs	r3, #0
 800197a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8001984:	2b01      	cmp	r3, #1
 8001986:	d101      	bne.n	800198c <HAL_SPI_TransmitReceive+0x26>
 8001988:	2302      	movs	r3, #2
 800198a:	e1fb      	b.n	8001d84 <HAL_SPI_TransmitReceive+0x41e>
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	2201      	movs	r2, #1
 8001990:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001994:	f7fe fee0 	bl	8000758 <HAL_GetTick>
 8001998:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80019a0:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	685b      	ldr	r3, [r3, #4]
 80019a6:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 80019a8:	887b      	ldrh	r3, [r7, #2]
 80019aa:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 80019ac:	887b      	ldrh	r3, [r7, #2]
 80019ae:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80019b0:	7efb      	ldrb	r3, [r7, #27]
 80019b2:	2b01      	cmp	r3, #1
 80019b4:	d00e      	beq.n	80019d4 <HAL_SPI_TransmitReceive+0x6e>
 80019b6:	697b      	ldr	r3, [r7, #20]
 80019b8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80019bc:	d106      	bne.n	80019cc <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	689b      	ldr	r3, [r3, #8]
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d102      	bne.n	80019cc <HAL_SPI_TransmitReceive+0x66>
 80019c6:	7efb      	ldrb	r3, [r7, #27]
 80019c8:	2b04      	cmp	r3, #4
 80019ca:	d003      	beq.n	80019d4 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 80019cc:	2302      	movs	r3, #2
 80019ce:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 80019d2:	e1cd      	b.n	8001d70 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80019d4:	68bb      	ldr	r3, [r7, #8]
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d005      	beq.n	80019e6 <HAL_SPI_TransmitReceive+0x80>
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d002      	beq.n	80019e6 <HAL_SPI_TransmitReceive+0x80>
 80019e0:	887b      	ldrh	r3, [r7, #2]
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d103      	bne.n	80019ee <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 80019e6:	2301      	movs	r3, #1
 80019e8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 80019ec:	e1c0      	b.n	8001d70 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80019f4:	b2db      	uxtb	r3, r3
 80019f6:	2b04      	cmp	r3, #4
 80019f8:	d003      	beq.n	8001a02 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	2205      	movs	r2, #5
 80019fe:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	2200      	movs	r2, #0
 8001a06:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	687a      	ldr	r2, [r7, #4]
 8001a0c:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	887a      	ldrh	r2, [r7, #2]
 8001a12:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	887a      	ldrh	r2, [r7, #2]
 8001a1a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	68ba      	ldr	r2, [r7, #8]
 8001a22:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	887a      	ldrh	r2, [r7, #2]
 8001a28:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	887a      	ldrh	r2, [r7, #2]
 8001a2e:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	2200      	movs	r2, #0
 8001a34:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	2200      	movs	r2, #0
 8001a3a:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	68db      	ldr	r3, [r3, #12]
 8001a40:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8001a44:	d802      	bhi.n	8001a4c <HAL_SPI_TransmitReceive+0xe6>
 8001a46:	8a3b      	ldrh	r3, [r7, #16]
 8001a48:	2b01      	cmp	r3, #1
 8001a4a:	d908      	bls.n	8001a5e <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	685a      	ldr	r2, [r3, #4]
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8001a5a:	605a      	str	r2, [r3, #4]
 8001a5c:	e007      	b.n	8001a6e <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	685a      	ldr	r2, [r3, #4]
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8001a6c:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001a78:	2b40      	cmp	r3, #64	@ 0x40
 8001a7a:	d007      	beq.n	8001a8c <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	681a      	ldr	r2, [r3, #0]
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001a8a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	68db      	ldr	r3, [r3, #12]
 8001a90:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8001a94:	d97c      	bls.n	8001b90 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	685b      	ldr	r3, [r3, #4]
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d002      	beq.n	8001aa4 <HAL_SPI_TransmitReceive+0x13e>
 8001a9e:	8a7b      	ldrh	r3, [r7, #18]
 8001aa0:	2b01      	cmp	r3, #1
 8001aa2:	d169      	bne.n	8001b78 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001aa8:	881a      	ldrh	r2, [r3, #0]
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001ab4:	1c9a      	adds	r2, r3, #2
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8001abe:	b29b      	uxth	r3, r3
 8001ac0:	3b01      	subs	r3, #1
 8001ac2:	b29a      	uxth	r2, r3
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001ac8:	e056      	b.n	8001b78 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	689b      	ldr	r3, [r3, #8]
 8001ad0:	f003 0302 	and.w	r3, r3, #2
 8001ad4:	2b02      	cmp	r3, #2
 8001ad6:	d11b      	bne.n	8001b10 <HAL_SPI_TransmitReceive+0x1aa>
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8001adc:	b29b      	uxth	r3, r3
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d016      	beq.n	8001b10 <HAL_SPI_TransmitReceive+0x1aa>
 8001ae2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ae4:	2b01      	cmp	r3, #1
 8001ae6:	d113      	bne.n	8001b10 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001aec:	881a      	ldrh	r2, [r3, #0]
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001af8:	1c9a      	adds	r2, r3, #2
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8001b02:	b29b      	uxth	r3, r3
 8001b04:	3b01      	subs	r3, #1
 8001b06:	b29a      	uxth	r2, r3
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	689b      	ldr	r3, [r3, #8]
 8001b16:	f003 0301 	and.w	r3, r3, #1
 8001b1a:	2b01      	cmp	r3, #1
 8001b1c:	d11c      	bne.n	8001b58 <HAL_SPI_TransmitReceive+0x1f2>
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8001b24:	b29b      	uxth	r3, r3
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d016      	beq.n	8001b58 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	68da      	ldr	r2, [r3, #12]
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b34:	b292      	uxth	r2, r2
 8001b36:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b3c:	1c9a      	adds	r2, r3, #2
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8001b48:	b29b      	uxth	r3, r3
 8001b4a:	3b01      	subs	r3, #1
 8001b4c:	b29a      	uxth	r2, r3
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8001b54:	2301      	movs	r3, #1
 8001b56:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8001b58:	f7fe fdfe 	bl	8000758 <HAL_GetTick>
 8001b5c:	4602      	mov	r2, r0
 8001b5e:	69fb      	ldr	r3, [r7, #28]
 8001b60:	1ad3      	subs	r3, r2, r3
 8001b62:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001b64:	429a      	cmp	r2, r3
 8001b66:	d807      	bhi.n	8001b78 <HAL_SPI_TransmitReceive+0x212>
 8001b68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001b6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b6e:	d003      	beq.n	8001b78 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8001b70:	2303      	movs	r3, #3
 8001b72:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        goto error;
 8001b76:	e0fb      	b.n	8001d70 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8001b7c:	b29b      	uxth	r3, r3
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d1a3      	bne.n	8001aca <HAL_SPI_TransmitReceive+0x164>
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8001b88:	b29b      	uxth	r3, r3
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d19d      	bne.n	8001aca <HAL_SPI_TransmitReceive+0x164>
 8001b8e:	e0df      	b.n	8001d50 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	685b      	ldr	r3, [r3, #4]
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d003      	beq.n	8001ba0 <HAL_SPI_TransmitReceive+0x23a>
 8001b98:	8a7b      	ldrh	r3, [r7, #18]
 8001b9a:	2b01      	cmp	r3, #1
 8001b9c:	f040 80cb 	bne.w	8001d36 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8001ba4:	b29b      	uxth	r3, r3
 8001ba6:	2b01      	cmp	r3, #1
 8001ba8:	d912      	bls.n	8001bd0 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001bae:	881a      	ldrh	r2, [r3, #0]
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001bba:	1c9a      	adds	r2, r3, #2
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8001bc4:	b29b      	uxth	r3, r3
 8001bc6:	3b02      	subs	r3, #2
 8001bc8:	b29a      	uxth	r2, r3
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8001bce:	e0b2      	b.n	8001d36 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	330c      	adds	r3, #12
 8001bda:	7812      	ldrb	r2, [r2, #0]
 8001bdc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001be2:	1c5a      	adds	r2, r3, #1
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8001bec:	b29b      	uxth	r3, r3
 8001bee:	3b01      	subs	r3, #1
 8001bf0:	b29a      	uxth	r2, r3
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001bf6:	e09e      	b.n	8001d36 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	689b      	ldr	r3, [r3, #8]
 8001bfe:	f003 0302 	and.w	r3, r3, #2
 8001c02:	2b02      	cmp	r3, #2
 8001c04:	d134      	bne.n	8001c70 <HAL_SPI_TransmitReceive+0x30a>
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8001c0a:	b29b      	uxth	r3, r3
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d02f      	beq.n	8001c70 <HAL_SPI_TransmitReceive+0x30a>
 8001c10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c12:	2b01      	cmp	r3, #1
 8001c14:	d12c      	bne.n	8001c70 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8001c1a:	b29b      	uxth	r3, r3
 8001c1c:	2b01      	cmp	r3, #1
 8001c1e:	d912      	bls.n	8001c46 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001c24:	881a      	ldrh	r2, [r3, #0]
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001c30:	1c9a      	adds	r2, r3, #2
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8001c3a:	b29b      	uxth	r3, r3
 8001c3c:	3b02      	subs	r3, #2
 8001c3e:	b29a      	uxth	r2, r3
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8001c44:	e012      	b.n	8001c6c <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	330c      	adds	r3, #12
 8001c50:	7812      	ldrb	r2, [r2, #0]
 8001c52:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001c58:	1c5a      	adds	r2, r3, #1
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8001c62:	b29b      	uxth	r3, r3
 8001c64:	3b01      	subs	r3, #1
 8001c66:	b29a      	uxth	r2, r3
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	689b      	ldr	r3, [r3, #8]
 8001c76:	f003 0301 	and.w	r3, r3, #1
 8001c7a:	2b01      	cmp	r3, #1
 8001c7c:	d148      	bne.n	8001d10 <HAL_SPI_TransmitReceive+0x3aa>
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8001c84:	b29b      	uxth	r3, r3
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d042      	beq.n	8001d10 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8001c90:	b29b      	uxth	r3, r3
 8001c92:	2b01      	cmp	r3, #1
 8001c94:	d923      	bls.n	8001cde <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	68da      	ldr	r2, [r3, #12]
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ca0:	b292      	uxth	r2, r2
 8001ca2:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ca8:	1c9a      	adds	r2, r3, #2
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8001cb4:	b29b      	uxth	r3, r3
 8001cb6:	3b02      	subs	r3, #2
 8001cb8:	b29a      	uxth	r2, r3
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8001cc6:	b29b      	uxth	r3, r3
 8001cc8:	2b01      	cmp	r3, #1
 8001cca:	d81f      	bhi.n	8001d0c <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	685a      	ldr	r2, [r3, #4]
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8001cda:	605a      	str	r2, [r3, #4]
 8001cdc:	e016      	b.n	8001d0c <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	f103 020c 	add.w	r2, r3, #12
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cea:	7812      	ldrb	r2, [r2, #0]
 8001cec:	b2d2      	uxtb	r2, r2
 8001cee:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cf4:	1c5a      	adds	r2, r3, #1
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8001d00:	b29b      	uxth	r3, r3
 8001d02:	3b01      	subs	r3, #1
 8001d04:	b29a      	uxth	r2, r3
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8001d0c:	2301      	movs	r3, #1
 8001d0e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8001d10:	f7fe fd22 	bl	8000758 <HAL_GetTick>
 8001d14:	4602      	mov	r2, r0
 8001d16:	69fb      	ldr	r3, [r7, #28]
 8001d18:	1ad3      	subs	r3, r2, r3
 8001d1a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001d1c:	429a      	cmp	r2, r3
 8001d1e:	d803      	bhi.n	8001d28 <HAL_SPI_TransmitReceive+0x3c2>
 8001d20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001d22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d26:	d102      	bne.n	8001d2e <HAL_SPI_TransmitReceive+0x3c8>
 8001d28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d103      	bne.n	8001d36 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8001d2e:	2303      	movs	r3, #3
 8001d30:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        goto error;
 8001d34:	e01c      	b.n	8001d70 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8001d3a:	b29b      	uxth	r3, r3
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	f47f af5b 	bne.w	8001bf8 <HAL_SPI_TransmitReceive+0x292>
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8001d48:	b29b      	uxth	r3, r3
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	f47f af54 	bne.w	8001bf8 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001d50:	69fa      	ldr	r2, [r7, #28]
 8001d52:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8001d54:	68f8      	ldr	r0, [r7, #12]
 8001d56:	f000 f937 	bl	8001fc8 <SPI_EndRxTxTransaction>
 8001d5a:	4603      	mov	r3, r0
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d006      	beq.n	8001d6e <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8001d60:	2301      	movs	r3, #1
 8001d62:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	2220      	movs	r2, #32
 8001d6a:	661a      	str	r2, [r3, #96]	@ 0x60
 8001d6c:	e000      	b.n	8001d70 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8001d6e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	2201      	movs	r2, #1
 8001d74:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  __HAL_UNLOCK(hspi);
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 8001d80:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
}
 8001d84:	4618      	mov	r0, r3
 8001d86:	3728      	adds	r7, #40	@ 0x28
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	bd80      	pop	{r7, pc}

08001d8c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	b088      	sub	sp, #32
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	60f8      	str	r0, [r7, #12]
 8001d94:	60b9      	str	r1, [r7, #8]
 8001d96:	603b      	str	r3, [r7, #0]
 8001d98:	4613      	mov	r3, r2
 8001d9a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8001d9c:	f7fe fcdc 	bl	8000758 <HAL_GetTick>
 8001da0:	4602      	mov	r2, r0
 8001da2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001da4:	1a9b      	subs	r3, r3, r2
 8001da6:	683a      	ldr	r2, [r7, #0]
 8001da8:	4413      	add	r3, r2
 8001daa:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8001dac:	f7fe fcd4 	bl	8000758 <HAL_GetTick>
 8001db0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8001db2:	4b39      	ldr	r3, [pc, #228]	@ (8001e98 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	015b      	lsls	r3, r3, #5
 8001db8:	0d1b      	lsrs	r3, r3, #20
 8001dba:	69fa      	ldr	r2, [r7, #28]
 8001dbc:	fb02 f303 	mul.w	r3, r2, r3
 8001dc0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8001dc2:	e054      	b.n	8001e6e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8001dc4:	683b      	ldr	r3, [r7, #0]
 8001dc6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001dca:	d050      	beq.n	8001e6e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8001dcc:	f7fe fcc4 	bl	8000758 <HAL_GetTick>
 8001dd0:	4602      	mov	r2, r0
 8001dd2:	69bb      	ldr	r3, [r7, #24]
 8001dd4:	1ad3      	subs	r3, r2, r3
 8001dd6:	69fa      	ldr	r2, [r7, #28]
 8001dd8:	429a      	cmp	r2, r3
 8001dda:	d902      	bls.n	8001de2 <SPI_WaitFlagStateUntilTimeout+0x56>
 8001ddc:	69fb      	ldr	r3, [r7, #28]
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d13d      	bne.n	8001e5e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	685a      	ldr	r2, [r3, #4]
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8001df0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	685b      	ldr	r3, [r3, #4]
 8001df6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8001dfa:	d111      	bne.n	8001e20 <SPI_WaitFlagStateUntilTimeout+0x94>
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	689b      	ldr	r3, [r3, #8]
 8001e00:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001e04:	d004      	beq.n	8001e10 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	689b      	ldr	r3, [r3, #8]
 8001e0a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001e0e:	d107      	bne.n	8001e20 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	681a      	ldr	r2, [r3, #0]
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001e1e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e24:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001e28:	d10f      	bne.n	8001e4a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	681a      	ldr	r2, [r3, #0]
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8001e38:	601a      	str	r2, [r3, #0]
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	681a      	ldr	r2, [r3, #0]
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8001e48:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	2201      	movs	r2, #1
 8001e4e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	2200      	movs	r2, #0
 8001e56:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8001e5a:	2303      	movs	r3, #3
 8001e5c:	e017      	b.n	8001e8e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8001e5e:	697b      	ldr	r3, [r7, #20]
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d101      	bne.n	8001e68 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8001e64:	2300      	movs	r3, #0
 8001e66:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8001e68:	697b      	ldr	r3, [r7, #20]
 8001e6a:	3b01      	subs	r3, #1
 8001e6c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	689a      	ldr	r2, [r3, #8]
 8001e74:	68bb      	ldr	r3, [r7, #8]
 8001e76:	4013      	ands	r3, r2
 8001e78:	68ba      	ldr	r2, [r7, #8]
 8001e7a:	429a      	cmp	r2, r3
 8001e7c:	bf0c      	ite	eq
 8001e7e:	2301      	moveq	r3, #1
 8001e80:	2300      	movne	r3, #0
 8001e82:	b2db      	uxtb	r3, r3
 8001e84:	461a      	mov	r2, r3
 8001e86:	79fb      	ldrb	r3, [r7, #7]
 8001e88:	429a      	cmp	r2, r3
 8001e8a:	d19b      	bne.n	8001dc4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8001e8c:	2300      	movs	r3, #0
}
 8001e8e:	4618      	mov	r0, r3
 8001e90:	3720      	adds	r7, #32
 8001e92:	46bd      	mov	sp, r7
 8001e94:	bd80      	pop	{r7, pc}
 8001e96:	bf00      	nop
 8001e98:	20000000 	.word	0x20000000

08001e9c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	b08a      	sub	sp, #40	@ 0x28
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	60f8      	str	r0, [r7, #12]
 8001ea4:	60b9      	str	r1, [r7, #8]
 8001ea6:	607a      	str	r2, [r7, #4]
 8001ea8:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8001eaa:	2300      	movs	r3, #0
 8001eac:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8001eae:	f7fe fc53 	bl	8000758 <HAL_GetTick>
 8001eb2:	4602      	mov	r2, r0
 8001eb4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001eb6:	1a9b      	subs	r3, r3, r2
 8001eb8:	683a      	ldr	r2, [r7, #0]
 8001eba:	4413      	add	r3, r2
 8001ebc:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8001ebe:	f7fe fc4b 	bl	8000758 <HAL_GetTick>
 8001ec2:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	330c      	adds	r3, #12
 8001eca:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8001ecc:	4b3d      	ldr	r3, [pc, #244]	@ (8001fc4 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8001ece:	681a      	ldr	r2, [r3, #0]
 8001ed0:	4613      	mov	r3, r2
 8001ed2:	009b      	lsls	r3, r3, #2
 8001ed4:	4413      	add	r3, r2
 8001ed6:	00da      	lsls	r2, r3, #3
 8001ed8:	1ad3      	subs	r3, r2, r3
 8001eda:	0d1b      	lsrs	r3, r3, #20
 8001edc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001ede:	fb02 f303 	mul.w	r3, r2, r3
 8001ee2:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8001ee4:	e060      	b.n	8001fa8 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8001ee6:	68bb      	ldr	r3, [r7, #8]
 8001ee8:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8001eec:	d107      	bne.n	8001efe <SPI_WaitFifoStateUntilTimeout+0x62>
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d104      	bne.n	8001efe <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8001ef4:	69fb      	ldr	r3, [r7, #28]
 8001ef6:	781b      	ldrb	r3, [r3, #0]
 8001ef8:	b2db      	uxtb	r3, r3
 8001efa:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8001efc:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8001efe:	683b      	ldr	r3, [r7, #0]
 8001f00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f04:	d050      	beq.n	8001fa8 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8001f06:	f7fe fc27 	bl	8000758 <HAL_GetTick>
 8001f0a:	4602      	mov	r2, r0
 8001f0c:	6a3b      	ldr	r3, [r7, #32]
 8001f0e:	1ad3      	subs	r3, r2, r3
 8001f10:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001f12:	429a      	cmp	r2, r3
 8001f14:	d902      	bls.n	8001f1c <SPI_WaitFifoStateUntilTimeout+0x80>
 8001f16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d13d      	bne.n	8001f98 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	685a      	ldr	r2, [r3, #4]
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8001f2a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	685b      	ldr	r3, [r3, #4]
 8001f30:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8001f34:	d111      	bne.n	8001f5a <SPI_WaitFifoStateUntilTimeout+0xbe>
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	689b      	ldr	r3, [r3, #8]
 8001f3a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001f3e:	d004      	beq.n	8001f4a <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	689b      	ldr	r3, [r3, #8]
 8001f44:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001f48:	d107      	bne.n	8001f5a <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	681a      	ldr	r2, [r3, #0]
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001f58:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f5e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001f62:	d10f      	bne.n	8001f84 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	681a      	ldr	r2, [r3, #0]
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8001f72:	601a      	str	r2, [r3, #0]
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	681a      	ldr	r2, [r3, #0]
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8001f82:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	2201      	movs	r2, #1
 8001f88:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	2200      	movs	r2, #0
 8001f90:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8001f94:	2303      	movs	r3, #3
 8001f96:	e010      	b.n	8001fba <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8001f98:	69bb      	ldr	r3, [r7, #24]
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d101      	bne.n	8001fa2 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8001f9e:	2300      	movs	r3, #0
 8001fa0:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8001fa2:	69bb      	ldr	r3, [r7, #24]
 8001fa4:	3b01      	subs	r3, #1
 8001fa6:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	689a      	ldr	r2, [r3, #8]
 8001fae:	68bb      	ldr	r3, [r7, #8]
 8001fb0:	4013      	ands	r3, r2
 8001fb2:	687a      	ldr	r2, [r7, #4]
 8001fb4:	429a      	cmp	r2, r3
 8001fb6:	d196      	bne.n	8001ee6 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8001fb8:	2300      	movs	r3, #0
}
 8001fba:	4618      	mov	r0, r3
 8001fbc:	3728      	adds	r7, #40	@ 0x28
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	bd80      	pop	{r7, pc}
 8001fc2:	bf00      	nop
 8001fc4:	20000000 	.word	0x20000000

08001fc8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	b086      	sub	sp, #24
 8001fcc:	af02      	add	r7, sp, #8
 8001fce:	60f8      	str	r0, [r7, #12]
 8001fd0:	60b9      	str	r1, [r7, #8]
 8001fd2:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	9300      	str	r3, [sp, #0]
 8001fd8:	68bb      	ldr	r3, [r7, #8]
 8001fda:	2200      	movs	r2, #0
 8001fdc:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8001fe0:	68f8      	ldr	r0, [r7, #12]
 8001fe2:	f7ff ff5b 	bl	8001e9c <SPI_WaitFifoStateUntilTimeout>
 8001fe6:	4603      	mov	r3, r0
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d007      	beq.n	8001ffc <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001ff0:	f043 0220 	orr.w	r2, r3, #32
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8001ff8:	2303      	movs	r3, #3
 8001ffa:	e027      	b.n	800204c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	9300      	str	r3, [sp, #0]
 8002000:	68bb      	ldr	r3, [r7, #8]
 8002002:	2200      	movs	r2, #0
 8002004:	2180      	movs	r1, #128	@ 0x80
 8002006:	68f8      	ldr	r0, [r7, #12]
 8002008:	f7ff fec0 	bl	8001d8c <SPI_WaitFlagStateUntilTimeout>
 800200c:	4603      	mov	r3, r0
 800200e:	2b00      	cmp	r3, #0
 8002010:	d007      	beq.n	8002022 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002016:	f043 0220 	orr.w	r2, r3, #32
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800201e:	2303      	movs	r3, #3
 8002020:	e014      	b.n	800204c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	9300      	str	r3, [sp, #0]
 8002026:	68bb      	ldr	r3, [r7, #8]
 8002028:	2200      	movs	r2, #0
 800202a:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 800202e:	68f8      	ldr	r0, [r7, #12]
 8002030:	f7ff ff34 	bl	8001e9c <SPI_WaitFifoStateUntilTimeout>
 8002034:	4603      	mov	r3, r0
 8002036:	2b00      	cmp	r3, #0
 8002038:	d007      	beq.n	800204a <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800203e:	f043 0220 	orr.w	r2, r3, #32
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8002046:	2303      	movs	r3, #3
 8002048:	e000      	b.n	800204c <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800204a:	2300      	movs	r3, #0
}
 800204c:	4618      	mov	r0, r3
 800204e:	3710      	adds	r7, #16
 8002050:	46bd      	mov	sp, r7
 8002052:	bd80      	pop	{r7, pc}

08002054 <memset>:
 8002054:	4402      	add	r2, r0
 8002056:	4603      	mov	r3, r0
 8002058:	4293      	cmp	r3, r2
 800205a:	d100      	bne.n	800205e <memset+0xa>
 800205c:	4770      	bx	lr
 800205e:	f803 1b01 	strb.w	r1, [r3], #1
 8002062:	e7f9      	b.n	8002058 <memset+0x4>

08002064 <__libc_init_array>:
 8002064:	b570      	push	{r4, r5, r6, lr}
 8002066:	4d0d      	ldr	r5, [pc, #52]	@ (800209c <__libc_init_array+0x38>)
 8002068:	4c0d      	ldr	r4, [pc, #52]	@ (80020a0 <__libc_init_array+0x3c>)
 800206a:	1b64      	subs	r4, r4, r5
 800206c:	10a4      	asrs	r4, r4, #2
 800206e:	2600      	movs	r6, #0
 8002070:	42a6      	cmp	r6, r4
 8002072:	d109      	bne.n	8002088 <__libc_init_array+0x24>
 8002074:	4d0b      	ldr	r5, [pc, #44]	@ (80020a4 <__libc_init_array+0x40>)
 8002076:	4c0c      	ldr	r4, [pc, #48]	@ (80020a8 <__libc_init_array+0x44>)
 8002078:	f000 f818 	bl	80020ac <_init>
 800207c:	1b64      	subs	r4, r4, r5
 800207e:	10a4      	asrs	r4, r4, #2
 8002080:	2600      	movs	r6, #0
 8002082:	42a6      	cmp	r6, r4
 8002084:	d105      	bne.n	8002092 <__libc_init_array+0x2e>
 8002086:	bd70      	pop	{r4, r5, r6, pc}
 8002088:	f855 3b04 	ldr.w	r3, [r5], #4
 800208c:	4798      	blx	r3
 800208e:	3601      	adds	r6, #1
 8002090:	e7ee      	b.n	8002070 <__libc_init_array+0xc>
 8002092:	f855 3b04 	ldr.w	r3, [r5], #4
 8002096:	4798      	blx	r3
 8002098:	3601      	adds	r6, #1
 800209a:	e7f2      	b.n	8002082 <__libc_init_array+0x1e>
 800209c:	080020d4 	.word	0x080020d4
 80020a0:	080020d4 	.word	0x080020d4
 80020a4:	080020d4 	.word	0x080020d4
 80020a8:	080020d8 	.word	0x080020d8

080020ac <_init>:
 80020ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80020ae:	bf00      	nop
 80020b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80020b2:	bc08      	pop	{r3}
 80020b4:	469e      	mov	lr, r3
 80020b6:	4770      	bx	lr

080020b8 <_fini>:
 80020b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80020ba:	bf00      	nop
 80020bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80020be:	bc08      	pop	{r3}
 80020c0:	469e      	mov	lr, r3
 80020c2:	4770      	bx	lr
